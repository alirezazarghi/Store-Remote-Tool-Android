<doc>
  <assembly>
    <name>Rebex.Zip</name>
  </assembly>
  <members>
    <member name="T:Rebex.IO.Compression.ArchiveItemCollection">
      <summary>
            Read-only collection of <see cref="T:Rebex.IO.Compression.ArchiveItem" /> objects.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItemCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ArchiveItemCollection" /> class that is a read-only wrapper around 
            a <see cref="T:System.Collections.Generic.List`1" /> object.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItemCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ArchiveItemCollection" /> class that is a read-only wrapper around 
            a <see cref="T:System.Collections.Generic.List`1" /> object
            that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">Initial capacity of the wrapped collection.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItemCollection.#ctor(System.Collections.Generic.IEnumerable{Rebex.IO.Compression.ArchiveItem})">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ArchiveItemCollection" /> class that is a read-only wrapper around 
            a <see cref="T:System.Collections.Generic.List`1" /> object
            that contains items copied from the specified collection.
            </summary>
      <param name="collection">The collection whose items are copied to the wrapped collection.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItemCollection.#ctor(Rebex.IO.Compression.ArchiveItem)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ArchiveItemCollection" /> class that is a read-only wrapper around 
            a <see cref="T:System.Collections.Generic.List`1" /> object
            that contains copy of the specified item.
            </summary>
      <param name="item">An object to insert into the wrapped collection.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItemCollection.Sort">
      <summary>
            Sorts the elements in the entire collection using the default comparer.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItemCollection.Sort(System.Collections.Generic.IComparer{Rebex.IO.Compression.ArchiveItem})">
      <summary>
            Sorts the elements in the entire collection using the specified comparer.
            </summary>
      <param name="comparer">
            The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, 
            or a null reference (Nothing in Visual Basic) to use the default comparer.
            </param>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItemCollection.Sort(System.Collections.IComparer)">
      <summary>
            Sorts the elements in the entire collection using the specified comparer.
            </summary>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements, or a null reference to sort alphabetically.</param>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItemCollection.Items">
      <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1" /> object that the <see cref="T:Rebex.IO.Compression.ArchiveItemCollection" /> class wraps.
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> object that the <see cref="T:Rebex.IO.Compression.ArchiveItemCollection" /> class wraps.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItemCollection.Count">
      <summary>
            Gets the number of items contained in the collection.
            </summary>
      <returns>The number of items contained in the collection.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItemCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveItem">
      <summary>
            Represents an item (file or directory) within an archive.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.GetLastWriteTime">
      <summary>
            Gets the last modification time attribute of the item.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.GetLastAccessTime">
      <summary>
            Gets the last access time attribute of the item.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.GetCreationTime">
      <summary>
            Gets the creation time attribute of the item.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.ToString">
      <summary>
            Returns a System.String that represents the current item.
            </summary>
      <returns>A System.String that represents the current item.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.ExtractToStream(System.IO.Stream)">
      <summary>
            Extracts the current file item to the specified stream.
            </summary>
      <param name="outputStream">Stream to write the extracted data to.</param>
      <returns>Operation result.</returns>
      <remarks>Note that data will be written to the current output stream position.</remarks>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.ExtractToArray">
      <summary>
            Extracts the current file item into a byte array.
            </summary>
      <returns>A byte array that contains extracted data.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.ExtractToFile(System.String)">
      <summary>
            Extracts the current file item into a local file.
            </summary>
      <param name="targetFilePath">Path to a (non-existing) local file where to extract the file item.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.ExtractToDirectory(System.String)">
      <summary>
            Extracts the current item into the specified directory.
            </summary>
      <param name="targetDirectoryPath">Path to an existing directory into which to extract the item.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.ExtractToDirectory(System.String,Rebex.IO.TraversalMode,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Extracts the current item into the specified local directory using the specified arguments.
            </summary>
      <param name="targetDirectoryPath">Path to an existing directory into which to extract the item.</param>
      <param name="mode">Traversal mode.</param>
      <param name="defaultActionOnExistingFiles">Specifies default behavior for files that already exist at the local directory.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.Delete">
      <summary>
            Deletes the current file or empty directory item from the archive.
            </summary>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.Delete(Rebex.IO.Compression.ArchiveSaveAction)">
      <summary>
            Deletes the current file or empty directory item from the archive.
            </summary>
      <param name="action">Save action.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.Delete(Rebex.IO.TraversalMode,Rebex.IO.Compression.ArchiveSaveAction)">
      <summary>
            Deletes the current item from the archive.
            </summary>
      <param name="mode">Traversal mode.</param>
      <param name="action">Save action.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.Rename(System.String)">
      <summary>
            Renames the current item.
            </summary>
      <param name="newName">A new name to be set (name only, not a path).</param>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.Open">
      <summary>
            Returns an initialized read-only non-seekable stream to read the decompressed data of the current item.
            </summary>
      <returns>A decompression stream.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.Open(System.String)">
      <summary>
            Returns an initialized read-only non-seekable stream to read the decompressed data of the current item.
            </summary>
      <param name="password">Password to open the stream.</param>
      <returns>A read-only non-seekable decompression stream.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.IsRootDirectory">
      <summary>
            Gets a value indicating whether the current <see cref="T:Rebex.IO.Compression.ArchiveItem" /> is the root directory of the archive.
            </summary>
      <returns>True if the item is root directory; false otherwise.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.IsDeleted">
      <summary>
            Gets a value indicating whether the current <see cref="T:Rebex.IO.Compression.ArchiveItem" /> represents a deleted item.
            </summary>
      <returns>True if the item is deleted.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.IsEncrypted">
      <summary>
            Gets a value indicating whether the current <see cref="T:Rebex.IO.Compression.ZipItem" /> is encrypted.
            </summary>
      <returns>True if the item is encrypted; false otherwise.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.EncryptionAlgorithm">
      <summary>
            Gets the name of the algorithm used to encrypt the current <see cref="T:Rebex.IO.Compression.ZipItem" />.
            </summary>
      <returns>Name of the encryption algorithm.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.ItemType">
      <summary>
            Gets the type of the item.
            </summary>
      <returns>Type of the item.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.IsEmptyDirectory">
      <summary>
            Gets a value indicating whether the <see cref="T:Rebex.IO.Compression.ArchiveItem" /> is an empty directory.
            </summary>
      <returns>True if the item is an empty directory; false otherwise.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.IsLink">
      <summary>
            Gets a value indicating whether the item is a link.
            </summary>
      <returns>True if the item is a link; false otherwise.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.Length">
      <summary>
            Gets uncompressed file length.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.LastWriteTime">
      <summary>
            Gets or sets the last modification time attribute of the item.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.LastAccessTime">
      <summary>
            Gets or sets the last access time attribute of the item.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.CreationTime">
      <summary>
            Gets or sets the creation time attribute of the item.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.CompressedLength">
      <summary>
            Gets compressed file length.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.CompressionMethod">
      <summary>
            Gets the compression method used to compress the file.
            </summary>
      <remarks>
            This is only valid for files.
            </remarks>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.Crc32">
      <summary>
            Gets the CRC32 (Cyclic Redundancy Check) value of the file (returns 0 for directories).
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.CanExtract">
      <summary>
            Returns true if the item can be extracted using Rebex ZIP for .NET component.
            </summary>
      <remarks>
            File can't be extracted if unsupported compression method was used to compress the data,
            if the file is encrypted or if the file type is unknown (<see cref="F:Rebex.IO.Compression.ArchiveItemType.Unknown" />).
            </remarks>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveItem.Comment">
      <summary>
            Gets or sets the comment of the item.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveItemType">
      <summary>
            Type of the item.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveItemType.File">
      <summary>
            Item is a regular file.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveItemType.Directory">
      <summary>
            Item is a directory.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveItemType.Unknown">
      <summary>
            Unknown item type.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveItemType.Link">
      <summary>
            Item is a symbolic link.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.CompressionMethod">
      <summary>
            Specifies the method used to compress data.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.CompressionMethod.NoCompression">
      <summary>
            Uncompressed.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.CompressionMethod.Deflate">
      <summary>
            Deflated.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.CompressionMethod.EnhancedDeflate">
      <summary>
            Enhanced DEFLATE (compatible with Deflate64(tm)).<br />
            Please note that some unpackers don't support the Enhanced deflate (e.g. Windows XP built in ZIP tool).
            </summary>
      <remarks>
            Deflate64 is registered trademark of PKWARE, Inc.
            </remarks>
    </member>
    <member name="T:Rebex.IO.Compression.EncryptionAlgorithm">
      <summary>
            Specifies the encryption algorithm used to encrypt data.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.EncryptionAlgorithm.None">
      <summary>
            No encryption.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.EncryptionAlgorithm.Unknown">
      <summary>
            Unknown encryption algorithm.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.EncryptionAlgorithm.Aes128">
      <summary>
            AES 128 bit encryption.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.EncryptionAlgorithm.Aes192">
      <summary>
            AES 192 bit encryption.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.EncryptionAlgorithm.Aes256">
      <summary>
            AES 256 bit encryption.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.EncryptionAlgorithm.Zip20">
      <summary>
            Traditional PKWARE encryption. Please note that this algorithm is considered weak by today's standards.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveStreamCloseMode">
      <summary>
            Specifies the closing mode for the underlying stream of the archive.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveStreamCloseMode.Close">
      <summary>
            Close underlying stream when closing the archive.
            </summary>
      <remarks>The archive is owner of the underlying stream and is responsible for closing it.</remarks>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveStreamCloseMode.LeaveOpen">
      <summary>
            Leave underlying stream opened when closing the archive.
            </summary>
      <remarks>The archive is not owner of the underlying stream, so the caller is responsible for closing it.</remarks>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveOpenMode">
      <summary>
            Specifies the opening mode of the archive.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOpenMode.OpenOrCreate">
      <summary>
            Opens an existing archive file; otherwise, creates a new archive file. 
            Empty file is treated as an empty archive.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOpenMode.CreateNew">
      <summary>
            Creates a new archive file. If the file already exists an exception is thrown.
            This requires <see cref="F:Rebex.IO.Compression.ArchiveAccessMode.ReadWrite" />.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOpenMode.Create">
      <summary>
            Creates a new archive file. If the file already exists it is truncated to zero length.
            This requires <see cref="F:Rebex.IO.Compression.ArchiveAccessMode.ReadWrite" />.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOpenMode.Open">
      <summary>
            Opens an existing archive file. If the file doesn't exists an exception is thrown.
            Empty file is treated as an empty archive.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOpenMode.Truncate">
      <summary>
            Opens an existing archive file and truncate it. If the file doesn't exists an exception is thrown.
            This requires <see cref="F:Rebex.IO.Compression.ArchiveAccessMode.ReadWrite" />.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveAccessMode">
      <summary>
            Archive file access mode.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveAccessMode.Auto">
      <summary>
            Choose the access mode automatically. <see cref="F:Rebex.IO.Compression.ArchiveAccessMode.ReadWrite" /> mode
            is used if the archive file can be open for writing; <see cref="F:Rebex.IO.Compression.ArchiveAccessMode.Read" /> is used otherwise.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveAccessMode.Read">
      <summary>
            Read access to the archive file. Data can only be read from the file.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveAccessMode.ReadWrite">
      <summary>
            Read and write access to the archive file. Data can be written to and read from the file.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveSaveMode">
      <summary>
            Specifies when changes are written to the underlying stream.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveSaveMode.Immediate">
      <summary>All changes are saved immediately.</summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveSaveMode.Delayed">
      <summary>
            Only compressed data is written to the underlying stream immediately. 
            All changes are written only when calling the <see cref="M:Rebex.IO.Compression.ZipArchive.Save" /> or <see cref="M:Rebex.IO.Compression.ZipArchive.Close" /> method.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveOperation">
      <summary>
            Current operation. The specific operation step is specified by <see cref="T:Rebex.IO.Compression.ArchiveOperationStep" />.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperation.None">
      <summary>No operation is in progress.</summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperation.Add">
      <summary>Compressing data using the Add method.</summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperation.Extract">
      <summary>Decompressing data using the Extract method.</summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperation.Delete">
      <summary>Deleting data.</summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperation.Save">
      <summary>Saving archive.</summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperation.Close">
      <summary>Closing archive.</summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperation.GetItems">
      <summary>Getting items.</summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchivePasswordReason">
      <summary>
            Specifies a reason why the <see cref="E:Rebex.IO.Compression.ZipArchive.PasswordRequired" /> event was fired.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchivePasswordReason.PasswordRequired">
      <summary>
            Currently extracting file is encrypted.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchivePasswordReason.IncorrectPasswordOrCorruptedData">
      <summary>
            Specified password is incorrect or the data is corrupted.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveUnsupportedFeatureExtractMode">
      <summary>
            Specifies behavior of extract on files with unsupported feature.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveUnsupportedFeatureExtractMode.ThrowException">
      <summary>
            Attempt to extract files with unsupported feature cause an exception to be thrown - however, this can still be changed by <see cref="E:Rebex.IO.Compression.ZipArchive.ProblemDetected" /> handler.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveUnsupportedFeatureExtractMode.SkipAll">
      <summary>
            Detected files with unsupported feature are to be skipped - however, this can still be changed by <see cref="E:Rebex.IO.Compression.ZipArchive.ProblemDetected" /> handler.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.Zip64Mode">
      <summary>
            Specifies values for the 64-bit ZIP mode (compatible with ZIP64(tm)) when adding new files.
            Without the 64-bit ZIP extension:<br />
            - files longer than 4GB cannot be added to the archive,<br />
            - archives larger than 4GB cannot be created,<br />
            - the archive can contain maximum 65535 entries.
            </summary>
      <remarks>ZIP64 is registered trademark of PKWARE, Inc.</remarks>
    </member>
    <member name="F:Rebex.IO.Compression.Zip64Mode.Auto">
      <summary>
            Automatically determines whether the 64-bit ZIP extension need to be used. 
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.Zip64Mode.Never">
      <summary>
            Never use the 64-bit ZIP extension. If the compressed or uncompressed size of the added file is longer than 4GB an exception is thrown. 
            Adding file to archive longer than 4GB also throws an exception.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.Zip64Mode.Always">
      <summary>
            Always use the 64-bit ZIP extension.<br />
            Please note that some unpackers don't support the 64-bit ZIP extension and
            they are even unable to extract files smaller than 4GB (e.g. Windows XP built in ZIP tool).
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveOperationStep">
      <summary>
            Currently executed step of <see cref="T:Rebex.IO.Compression.ArchiveOperation" />.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.HierarchyRetrieving">
      <summary>
            Retrieval of the file system or the archive hierarchy was started.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.HierarchyRetrieved">
      <summary>
            Retrieval of the file system or the archive hierarchy was successfully completed.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.HierarchyRetrievalFailed">
      <summary>
            Retrieval of the file system or the archive hierarchy failed or operation was canceled.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.FileChecking">
      <summary>
            Necessary checks of a file were started.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.FileProcessing">
      <summary>
            File processing was started.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.FileProcessed">
      <summary>
            File was successfully processed.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.FileSkipped">
      <summary>
            File was skipped.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.FileProcessingFailed">
      <summary>
            File processing failed or the operation was canceled.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.DirectoryChecking">
      <summary>
            Directory processing was started.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.DirectoryCreated">
      <summary>
            Directory was successfully created. If directory already exists, this event is not raised.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.DirectorySkipped">
      <summary>
            Directory with whole content was skipped (no files or subdirectories are to be processed).
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.DirectoryCreationFailed">
      <summary>
            Creation of directory failed or the operation was canceled.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.FileDataBlockProcessed">
      <summary>
            A file data block was processed.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.FileDeleted">
      <summary>
            File was successfully deleted.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.DirectoryDeleted">
      <summary>
            Directory was successfully deleted.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.DirectoryRetrievalStarted">
      <summary>
            Retrieval of the particular directory hierarchy was started.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.DirectoryRetrieved">
      <summary>
            Retrieval of the particular directory hierarchy was successfully completed.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.DirectoryRetrievalSkipped">
      <summary>
            Retrieval of the particular directory hierarchy was skipped (no files or subdirectories of the directory are to be processed).
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveOperationStep.DirectoryRetrievalFailed">
      <summary>
            Retrieval of the particular directory hierarchy failed or operation was canceled.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveProblemType">
      <summary>
            Detailed specification of a problem that occurred during the operation.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.FileExists">
      <summary>
            A target file with the same name already exists.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.LinkDetected">
      <summary>
            A symbolic link was detected.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.InfiniteLoopDetected">
      <summary>
            Symbolic link is probably a part of an infinite loop in the file system hierarchy.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotCreateDirectory">
      <summary>
            Cannot create target directory.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotProcessFile">
      <summary>
            Cannot add or extract file.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotReadFromDirectory">
      <summary>
            Cannot read from a directory.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotFindFile">
      <summary>
            Cannot find the file which was found while retrieving hierarchy earlier.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.FileNameIsInvalid">
      <summary>
            Name of the file is invalid on the target file system.
            For example, colon is a valid filename character on Unix file systems, but invalid in local Windows file system.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.DirectoryNameIsInvalid">
      <summary>
            Name of the directory is invalid on the target file system. 
            For example, colon is a valid filename character on Unix file systems, but invalid in local Windows file system.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotFindDirectory">
      <summary>
            Cannot find the directory which was found while retrieving hierarchy earlier.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotFindLink">
      <summary>
            Cannot find the link which was found while retrieving hierarchy earlier.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotResolveLink">
      <summary>
            Link is corrupted or its target cannot be found.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.NotFileOrDirectory">
      <summary>
            Currently processed item is neither a file nor a directory.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.OperationCanceled">
      <summary>
            Operation was canceled.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.UnsupportedFeature">
      <summary>
            Feature not supported (eg. compression method, archive format, archive version).
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotDeleteFile">
      <summary>
            Cannot delete the file.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotDeleteDirectory">
      <summary>
            Cannot delete the directory.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.OperationFailure">
      <summary>
            Operation failed.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.AnotherOperationPending">
      <summary>
            Another operation is pending.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CorruptedArchive">
      <summary>
            Not a ZIP archive or structure of the archive is corrupted.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CrcCheckFailed">
      <summary>
            CRC check failed.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.ItemNotFound">
      <summary>
            Item on specified path was not found.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.InvalidPath">
      <summary>
            Specified path is invalid (or used in wrong context).
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotDeleteNotEmptyDirectory">
      <summary>
            Cannot delete directory because it is not empty.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.CannotOpenArchiveForWriting">
      <summary>
            Archive cannot be opened for writing.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.IncorrectPasswordOrCorruptedData">
      <summary>
            Specified password is incorrect or encrypted data is corrupted (or no password was specified).
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.PasswordInconsistence">
      <summary>
            Specified password cannot be encoded using the ZipArchive.Options.PasswordEncoding.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.InternalError">
      <summary>
            Internal error.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemType.DemoExpired">
      <summary>
            Trial version of Rebex ZIP for .NET has expired.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveProblemActions">
      <summary>
            Specifies the action to resolve the current problem using the <see cref="E:Rebex.IO.Compression.ZipArchive.ProblemDetected" /> event.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemActions.Skip">
      <summary>
            Skip the current problematic item.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemActions.Overwrite">
      <summary>
            Overwrite target file with the same name.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemActions.OverwriteIfOlder">
      <summary>
            Overwrite target file with the same name if it is older than the source file.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemActions.OverwriteIfDifferentSize">
      <summary>
            Overwrite target file with the same name if it has a different size.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemActions.OverwriteIfDifferentChecksum">
      <summary>
            Overwrite target file with the same name if it has a different CRC-32 checksum.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemActions.Rename">
      <summary>
            Assign a different name to the target file. NewName of the event argument must be set to the desired name.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemActions.Retry">
      <summary>
            Retry the current operation again.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemActions.FollowLink">
      <summary>
            Resolve the symbolic link.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemActions.Cancel">
      <summary>
            Cancel the whole operation. An exception with the <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> property 
            set to the <see cref="F:Rebex.IO.Compression.ArchiveProblemType.OperationCanceled" /> is thrown.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveProblemActions.ThrowException">
      <summary>
            Cancel the whole operation. Don't process any other files. An exception describing the problem is thrown.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchivePasswordActions">
      <summary>
            Specifies the action to perform when the <see cref="E:Rebex.IO.Compression.ZipArchive.PasswordRequired" /> event was fired.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchivePasswordActions.UsePassword">
      <summary>
            Use the specified password and continue processing the file; or throw exception if no password was specified.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchivePasswordActions.SkipFile">
      <summary>
            Skip the file and continue.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchivePasswordActions.Cancel">
      <summary>
            Cancel whole operation by throwing a Cancel exception.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveItemTypes">
      <summary>
            Item types to be retrieved.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveItemTypes.Files">
      <summary>
            Only regular files are to be retrieved.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveItemTypes.Directories">
      <summary>
            Only directories are to be retrieved.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveItemTypes.Links">
      <summary>
            Only symbolic links are to be retrieved.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveItemTypes.Unknown">
      <summary>
            Only items of unknown type are to be retrieved.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveItemTypes.All">
      <summary>
            Items of all types are to be retrieved.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveSaveAction">
      <summary>
            Specifies options of <see cref="M:Rebex.IO.Compression.ZipArchive.Delete(System.String,Rebex.IO.TraversalMode,Rebex.IO.Compression.ArchiveSaveAction)" />, <see cref="M:Rebex.IO.Compression.ZipArchive.Save(Rebex.IO.Compression.ArchiveSaveAction)" />
            and <see cref="M:Rebex.IO.Compression.ZipArchive.Close(Rebex.IO.Compression.ArchiveSaveAction)" /> methods.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveSaveAction.Auto">
      <summary>
            Automatically determines whether saving and shrinking is needed.
            If shrinking is needed, it can take a long time if working with large archives.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveSaveAction.None">
      <summary>
            No action is performed. If some files were deleted from the archive, you might want to use Auto or Shrink instead.
            When used with the <see cref="M:Rebex.IO.Compression.ZipArchive.Save(Rebex.IO.Compression.ArchiveSaveAction)">Save</see> method, changes are saved always (but the archive is not shrunken).
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ArchiveSaveAction.Shrink">
      <summary>
            Save any pending changes and also shrink the archive (remove unused space by rearranging the data within the archive).
            Shrink can take a long time if working with large archives.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ChecksumVerificationMode">
      <summary>
            Specifies mode of checksum verification.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ChecksumVerificationMode.Extract">
      <summary>
            Checksum is verified after file extraction only.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.ChecksumVerificationMode.AddAndExtract">
      <summary>
            Checksum is verified after a new file is added into a Zip archive and also when a file is extracted.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ArchiveOperationResult">
      <summary>
            Result of an archive operation such as 
            <see cref="M:Rebex.IO.Compression.ZipArchive.Add(System.String,System.String)" />, <see cref="M:Rebex.IO.Compression.ZipArchive.Extract(System.String,System.String)" /> or <see cref="M:Rebex.IO.Compression.ZipArchive.Delete(System.String,Rebex.IO.TraversalMode)" />.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveOperationResult.FilesAffected">
      <summary>
            Number of files affected (successfully) by the operation.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveOperationResult.FilesCompressedLength">
      <summary>
            Total compressed length of files affected by the operation.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ArchiveOperationResult.FilesUncompressedLength">
      <summary>
            Total uncompressed length of files affected by the operation.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.Compressor">
      <summary>
            Provides utility methods for compress and decompress chunks of data.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.Compressor.Compress(System.String)">
      <summary>
            Compress a string data to a byte array.
            </summary>
      <param name="data">String data to compress.</param>
      <returns>Compressed data.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.Compressor.Compress(System.String,System.Text.Encoding)">
      <summary>
            Compress a string data to a byte array.
            </summary>
      <param name="data">String data to compress.</param>
      <param name="dataCharSet">Encoding of the input string.</param>
      <returns>Compressed data in byte array.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.Compressor.Compress(System.Byte[])">
      <summary>
            Compress a byte array data to a byte array.
            </summary>
      <param name="data">Data to compress.</param>
      <returns>Compressed data.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.Compressor.Decompress(System.Byte[])">
      <summary>
            Decompress byte data to a string.
            </summary>
      <param name="data">Data to decompress.</param>
      <returns>Decompressed string</returns>
    </member>
    <member name="M:Rebex.IO.Compression.Compressor.Decompress(System.Byte[],System.Text.Encoding)">
      <summary>
            Decompress byte data to a string.
            </summary>
      <param name="data">Byte data to decompress.</param>
      <param name="dataCharSet">Encoding of the output string.</param>
      <returns>Decompressed string.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.Compressor.DecompressData(System.Byte[])">
      <summary>
            Decompresses data.
            </summary>
      <param name="data">Data to decompress.</param>
      <returns>Decompressed data.</returns>
    </member>
    <member name="T:Rebex.IO.Compression.Gzip">
      <summary>
            Class for GZIP compression and decompression. It is a high level API on top of <see cref="T:Rebex.IO.Compression.Streams.GzipCompressionStream" />.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.Gzip.#ctor">
      <summary>
            Creates an instance of <see cref="T:Rebex.IO.Compression.Gzip" /> object.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.Gzip.Compress(System.String,Rebex.IO.TraversalMode,System.String)">
      <summary>
            Compresses specified files or directories into a GZIP archive.
            New GZIP file is created (existing GZIP file is overwritten).
            </summary>
      <param name="sourcePathOrMask">Path (with or without a mask) to an external (local) file or directory.</param>
      <param name="mode">Traversal mode.</param>
      <param name="archivePath">Path to a GZIP archive where the files are to be compressed.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Gzip.Compress(Rebex.IO.FileSet,System.String)">
      <summary>
            Compresses files defined by <paramref name="set" /> into a GZIP archive.
            New GZIP file is created (existing GZIP file is overwritten).
            </summary>
      <param name="set">FileSet describing which files are to be compressed.</param>
      <param name="archivePath">Path to a GZIP archive where the files are to be compressed.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Gzip.Decompress(System.String,System.String)">
      <summary>
            Decompresses all files from the GZIP archive to the specified directory.
            Existing files in target directory will be overwritten.
            </summary>
      <param name="archivePath">Path to a GZIP archive to be decompressed.</param>
      <param name="targetDirectory">Path to output folder (directory to which to decompress the contents of the GZIP archive).</param>
    </member>
    <member name="P:Rebex.IO.Compression.Gzip.CompressionLevel">
      <summary>
            Gets or sets the compression level. 
            Possible values are 0-9, where 0 means no compression (fastest) and 9 means best compression (slowest). 
            6 (medium compression and speed) is a default value.
            </summary>
      <value>Compression level.</value>
    </member>
    <member name="T:Rebex.IO.Compression.GzipException">
      <summary>
            An exception that is thrown when an error occurs while using the GZIP API.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.GzipException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.GzipException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Rebex.IO.Compression.GzipException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.GzipException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:Rebex.IO.Compression.Streams.CompressionStream">
      <summary>
            Provides a stream that uses specified compressed data format to compress data.
            If opened for writing it compresses specified data and writes the compressed data into an underlying stream.
            If opened for reading it reads an uncompressed data from the underlying stream and returns a compressed data.
            Unlike similar class present in .NET Framework 2.0, this one actually makes it possible to use Flush 
            when compressing data to make sure all data written to the stream have been written into the underlying stream as well.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.Streams.CompressionStream.DefaultCompressionLevel">
      <summary>
            The default compression level.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.CompressionStream.#ctor(System.IO.Stream,Rebex.IO.Compression.Streams.OpenMode,Rebex.IO.Compression.Streams.CompressionFormat,Rebex.IO.Compression.CompressionMethod)">
      <summary>
            Creates a new instance of <see cref="T:Rebex.IO.Compression.Streams.CompressionStream" /> class.
            </summary>
      <param name="inner">Underlying stream that contains decompressed data or to which compressed data is written.</param>
      <param name="mode">Whether data will be read from or written to the underlying stream.</param>
      <param name="format">Format of the compressed data.</param>
      <param name="method">Compression method of the particular data format.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.CompressionStream.#ctor(System.IO.Stream,Rebex.IO.Compression.Streams.OpenMode,Rebex.IO.Compression.Streams.CompressionFormat,Rebex.IO.Compression.CompressionMethod,System.Int32)">
      <summary>
            Creates a new instance of <see cref="T:Rebex.IO.Compression.Streams.CompressionStream" /> class.
            </summary>
      <param name="inner">Underlying stream that contains decompressed data or to which compressed data is written.</param>
      <param name="mode">Whether data will be read from or written to the underlying stream.</param>
      <param name="format">Format of the compressed data.</param>
      <param name="method">Compression method of the particular data format.</param>
      <param name="compressionLevel">Compression level. Possible values are 0-9, 
            where 0 means no compression (fastest) and 9 means best compression (slowest). 
            6 (medium compression and speed) is a default value.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.CompressionStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads data from the underlying stream, compressing them during the process.
            </summary>
      <param name="buffer">An array of bytes to fill with compressed data.</param>
      <param name="offset">The zero-based byte offset in the buffer at which to copy bytes read from the current stream.</param>
      <param name="count">The maximum number of bytes to be read into the buffer.</param>
      <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.CompressionStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a sequence of bytes into the current stream. The sequence will be compressed and the result written
            into the underlying stream.
            </summary>
      <param name="buffer">An array of bytes to be compressed.</param>
      <param name="offset">The zero-based byte offset in the buffer at which to begin writing bytes to the current stream.</param>
      <param name="count">The number of bytes to be compressed from the buffer.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.CompressionStream.Flush">
      <summary>
            Causes any buffered data to be written to the underlying stream.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.CompressionStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            This method is not supported by the <see cref="T:Rebex.IO.Compression.Streams.CompressionStream" /> class.
            </summary>
      <param name="offset">A byte offset relative to the origin parameter.</param>
      <param name="origin">A value of type System.IO.SeekOrigin indicating the reference point used to obtain the new position.</param>
      <remarks>The new position within the current stream.</remarks>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.CompressionStream.SetLength(System.Int64)">
      <summary>
            This method is not supported by the <see cref="T:Rebex.IO.Compression.Streams.CompressionStream" /> class.
            </summary>
      <param name="value">The desired length of the current stream in bytes.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.CompressionStream.Dispose(System.Boolean)">
      <summary>
            Closes the underlying stream.
            </summary>
      <param name="disposing">true to close the underlying stream; false otherwise.</param>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.CompressionStream.CanRead">
      <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
      <value>true if the stream supports reading; otherwise, false.</value>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.CompressionStream.CanSeek">
      <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
      <value>False because this stream does not support seeking.</value>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.CompressionStream.CanWrite">
      <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
      <value>true if the stream supports writing; otherwise, false.</value>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.CompressionStream.Length">
      <summary>
            This property is not supported by the <see cref="T:Rebex.IO.Compression.Streams.CompressionStream" /> class.
            </summary>
      <value>Length of the stream in bytes.</value>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.CompressionStream.Position">
      <summary>
            This property is not supported by the <see cref="T:Rebex.IO.Compression.Streams.CompressionStream" /> class.
            </summary>
      <value>The current position within the stream.</value>
    </member>
    <member name="T:Rebex.IO.Compression.Streams.DecompressionStream">
      <summary>
            Provides a stream that uses specified compressed data format to decompress data.
            If opened for writing it decompresses specified data and writes the decompressed data into an underlying stream.
            If opened for reading it reads a compressed data from the underlying stream and returns a decompressed data.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.DecompressionStream.#ctor(System.IO.Stream,Rebex.IO.Compression.Streams.OpenMode,Rebex.IO.Compression.Streams.CompressionFormat,Rebex.IO.Compression.CompressionMethod)">
      <summary>
            Creates a new instance of <see cref="T:Rebex.IO.Compression.Streams.DecompressionStream" /> class.
            </summary>
      <param name="inner">Underlying stream that contains compressed data or to which decompressed data is written.</param>
      <param name="mode">Whether data will be read from or written to the underlying stream.</param>
      <param name="format">Format of the compressed data.</param>
      <param name="method">Compression method of the particular data format.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.DecompressionStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads data from the underlying stream, decompressing them during the process.
            </summary>
      <param name="buffer">An array of bytes to fill with decompressed data.</param>
      <param name="offset">The zero-based byte offset in the buffer at which to copy bytes read from the current stream.</param>
      <param name="count">The maximum number of bytes to be read into the buffer.</param>
      <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.DecompressionStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a sequence of bytes into the current stream. The sequence will be decompressed and the result written
            into the underlying stream.
            </summary>
      <param name="buffer">An array of bytes to be decompressed.</param>
      <param name="offset">The zero-based byte offset in the buffer at which to begin writing bytes to the current stream.</param>
      <param name="count">The number of bytes to be decompressed from the buffer.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.DecompressionStream.Flush">
      <summary>
            Causes any buffered data to be written to the underlying stream.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.DecompressionStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            This method is not supported by the <see cref="T:Rebex.IO.Compression.Streams.DecompressionStream" /> class.
            </summary>
      <param name="offset">A byte offset relative to the origin parameter.</param>
      <param name="origin">A value of type System.IO.SeekOrigin indicating the reference point used to obtain the new position.</param>
      <remarks>The new position within the current stream.</remarks>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.DecompressionStream.SetLength(System.Int64)">
      <summary>
            This method is not supported by the <see cref="T:Rebex.IO.Compression.Streams.DecompressionStream" /> class.
            </summary>
      <param name="value">The desired length of the current stream in bytes.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.DecompressionStream.Dispose(System.Boolean)">
      <summary>
            Closes the underlying stream.
            </summary>
      <param name="disposing">true to close the underlying stream; false otherwise.</param>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.DecompressionStream.CanRead">
      <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
      <value>true if the stream supports reading; otherwise, false.</value>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.DecompressionStream.CanSeek">
      <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
      <value>False because this stream does not support seeking.</value>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.DecompressionStream.CanWrite">
      <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
      <value>true if the stream supports writing; otherwise, false.</value>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.DecompressionStream.Length">
      <summary>
            This property is not supported by the <see cref="T:Rebex.IO.Compression.Streams.DecompressionStream" /> class.
            </summary>
      <value>Length of the stream in bytes.</value>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.DecompressionStream.Position">
      <summary>
            This property is not supported by the <see cref="T:Rebex.IO.Compression.Streams.DecompressionStream" /> class.
            </summary>
      <value>The current position within the stream.</value>
    </member>
    <member name="T:Rebex.IO.Compression.Streams.GzipCompressionStream">
      <summary>
            Provides a stream that uses RFC 1952 - GZIP implementation to compress data.
            If opened for writing it compresses specified data and writes the compressed data into an underlying stream.
            If opened for reading it reads an uncompressed data from the underlying stream and returns a compressed data.
            Unlike similar class present in .NET Framework 2.0, this one actually makes it possible to use Flush 
            when compressing data to make sure all data written to the stream have been written into the underlying stream as well.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.GzipCompressionStream.#ctor(System.IO.Stream,Rebex.IO.Compression.Streams.OpenMode)">
      <summary>
            Creates a new instance of <see cref="T:Rebex.IO.Compression.Streams.GzipCompressionStream" /> class.
            </summary>
      <param name="inner">Underlying stream that contains decompressed data or to which compressed data is written.</param>
      <param name="mode">Whether data will be read from or written to the underlying stream.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.GzipCompressionStream.#ctor(System.IO.Stream,Rebex.IO.Compression.Streams.OpenMode,System.Int32)">
      <summary>
            Creates a new instance of <see cref="T:Rebex.IO.Compression.Streams.GzipCompressionStream" /> class.
            </summary>
      <param name="inner">Underlying stream that contains decompressed data or to which compressed data is written.</param>
      <param name="mode">Whether data will be read from or written to the underlying stream.</param>
      <param name="compressionLevel">Compression level. Possible values are 0-9, 
            where 0 means no compression (fastest) and 9 means best compression (slowest). 
            6 (medium compression and speed) is a default value.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.GzipCompressionStream.#ctor(System.IO.Stream,Rebex.IO.Compression.Streams.OpenMode,System.String)">
      <summary>
            Creates a new instance of <see cref="T:Rebex.IO.Compression.Streams.GzipCompressionStream" /> class.
            </summary>
      <param name="inner">Underlying stream that contains decompressed data or to which compressed data is written.</param>
      <param name="mode">Whether data will be read from or written to the underlying stream.</param>
      <param name="fileName">A file name associated with compressed data.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.GzipCompressionStream.#ctor(System.IO.Stream,Rebex.IO.Compression.Streams.OpenMode,System.Int32,System.String,System.Nullable{System.DateTime},System.String)">
      <summary>
            Creates a new instance of <see cref="T:Rebex.IO.Compression.Streams.GzipCompressionStream" /> class.
            </summary>
      <param name="inner">Underlying stream that contains decompressed data or to which compressed data is written.</param>
      <param name="mode">Whether data will be read from or written to the underlying stream.</param>
      <param name="compressionLevel">Compression level. Possible values are 0-9, 
            where 0 means no compression (fastest) and 9 means best compression (slowest). 
            6 (medium compression and speed) is a default value.</param>
      <param name="fileName">A file name associated with compressed data.</param>
      <param name="lastWriteTime">A last modification time associated with compressed data.</param>
      <param name="comment">A comment associated with compressed data.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.GzipCompressionStream.StartNextFile">
      <summary>
            Finishes current file and writes new GZIP header for next file into the underlying stream.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.GzipCompressionStream.StartNextFile(System.String,System.Nullable{System.DateTime},System.String)">
      <summary>
            Finishes current file and writes new GZIP header for next file into the underlying stream.
            </summary>
      <param name="fileName">A file name associated with compressed data.</param>
      <param name="lastWriteTime">A last modification time associated with compressed data.</param>
      <param name="comment">A comment associated with compressed data.</param>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.GzipCompressionStream.FileName">
      <summary>
            Gets a file name stored in GZIP header.
            </summary>
      <returns>A file name stored in GZIP header; or null reference (Nothing in Visual Basic) if no name is stored.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.GzipCompressionStream.LastWriteTime">
      <summary>
            Gets a last modification time stored in GZIP header.
            </summary>
      <returns>A last modification time in GZIP header; or null reference (Nothing in Visual Basic) if no date is stored.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.GzipCompressionStream.Comment">
      <summary>
            Gets a comment stored in GZIP header.
            </summary>
      <returns>A comment stored in GZIP header; or null reference (Nothing in Visual Basic) if no comment is stored.</returns>
    </member>
    <member name="T:Rebex.IO.Compression.Streams.GzipDecompressionStream">
      <summary>
            Provides a stream that uses RFC 1952 - GZIP implementation to decompress data.
            If opened for writing it decompresses specified data and writes the decompressed data into an underlying stream.
            If opened for reading it reads a compressed data from the underlying stream and returns a decompressed data.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.GzipDecompressionStream.#ctor(System.IO.Stream,Rebex.IO.Compression.Streams.OpenMode)">
      <summary>
            Creates a new instance of <see cref="T:Rebex.IO.Compression.Streams.GzipDecompressionStream" /> class.
            </summary>
      <param name="inner">Underlying stream that contains compressed data or to which decompressed data is written.</param>
      <param name="mode">Whether data will be read from or written to the underlying stream.</param>
    </member>
    <member name="M:Rebex.IO.Compression.Streams.GzipDecompressionStream.ReadNextFileHeader">
      <summary>
            Reads the GZIP header from the current stream position and fills the class properties with values read from the GZIP header. 
            This method is not intended for seeking to next GZIP header position. 
            This method can be called only when the stream was just opened (and no method was called already)
            or when a file was read completely (the <see cref="M:Rebex.IO.Compression.Streams.DecompressionStream.Read(System.Byte[],System.Int32,System.Int32)" /> method reads no data).
            Calling this method before the whole file has been read throws an <see cref="T:System.InvalidOperationException" />.
            </summary>
      <returns>True if the next GZIP header was read; false if there is no GZIP header to read.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.GzipDecompressionStream.FileName">
      <summary>
            Gets a file name stored in GZIP header.
            </summary>
      <returns>A file name stored in GZIP header; or null reference (Nothing in Visual Basic) if no name is stored.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.GzipDecompressionStream.LastWriteTime">
      <summary>
            Gets a last write time stored in GZIP header.
            </summary>
      <returns>A last write time in GZIP header; or null reference (Nothing in Visual Basic) if no date is stored.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.Streams.GzipDecompressionStream.Comment">
      <summary>
            Gets a comment stored in GZIP header.
            </summary>
      <returns>A comment stored in GZIP header; or null reference (Nothing in Visual Basic) if no comment is stored.</returns>
    </member>
    <member name="T:Rebex.IO.Compression.Streams.OpenMode">
      <summary>
            Specifies whether the stream can be used for reading or writing.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.Streams.OpenMode.Read">
      <summary>
            Stream can be used for reading.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.Streams.OpenMode.Write">
      <summary>
            Stream can be used for writing.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.Streams.CompressionFormat">
      <summary>
            Specifies the compressed data format.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.Streams.CompressionFormat.Deflate">
      <summary>
            Deflate algorithm specified in RFC 1951.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.Streams.CompressionFormat.Zlib">
      <summary>
            ZLIB algorithm specified in RFC 1950.
            </summary>
    </member>
    <member name="F:Rebex.IO.Compression.Streams.CompressionFormat.Gzip">
      <summary>
            GZIP algorithm specified in RFC 1952.
            </summary>
    </member>
    <member name="T:Rebex.IO.Compression.ZipArchive">
      <summary>
            Represents a ZIP archive and provides methods to work with it.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.#ctor(System.String)">
      <summary>
            Initializes a <see cref="T:Rebex.IO.Compression.ZipArchive" /> object with the specified ZIP archive.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zipFilePath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="zipFilePath" /> is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path exceed the maximum length defined by system.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the specified path was not found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified file path was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.
            -or- The specified path refers to a directory.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Archive cannot be opened (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.#ctor(System.String,Rebex.IO.Compression.ArchiveOpenMode)">
      <summary>
            Initializes a <see cref="T:Rebex.IO.Compression.ZipArchive" /> object with the specified ZIP archive.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="openMode">Open mode - specified whether to open an existing ZIP archive, create new ZIP archive, etc.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zipFilePath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="zipFilePath" /> is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="openMode" /> specified an invalid value.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path exceed the maximum length defined by system.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the specified path was not found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified file path was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.
            -or- The specified path refers to a directory.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Archive cannot be opened (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.#ctor(System.String,Rebex.IO.Compression.ArchiveOpenMode,Rebex.IO.Compression.ArchiveAccessMode)">
      <summary>
            Initializes a <see cref="T:Rebex.IO.Compression.ZipArchive" /> object with the specified ZIP file.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="openMode">Open mode - specified whether to open an existing ZIP archive, create new ZIP archive, etc.</param>
      <param name="accessMode">Access mode - specifies whether to open a ZIP file in read-write, read-only or auto mode.</param>
      <remarks>If no changes are to be made to the ZIP archive, use <see cref="F:Rebex.IO.Compression.ArchiveAccessMode.Read" />.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zipFilePath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="zipFilePath" /> is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.
            -or- Invalid combination of the <paramref name="openMode" /> and <paramref name="accessMode" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="openMode" /> or <paramref name="accessMode" /> specified an invalid value.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path exceed the maximum length defined by system.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the specified path was not found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified file path was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.
            -or- The specified path refers to a directory.
            -or- Path specified a file that is read-only and access is not Read.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Archive cannot be opened (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a <see cref="T:Rebex.IO.Compression.ZipArchive" /> object with the specified ZIP archive stream.
            </summary>
      <param name="zipStream">A readable/seekable stream containing a ZIP archive or 
            empty writable/seekable stream where to create a new ZIP archive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zipStream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Specified stream is not seekable or readable.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Archive cannot be opened (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.#ctor(System.IO.Stream,Rebex.IO.Compression.ArchiveStreamCloseMode)">
      <summary>
            Initializes a <see cref="T:Rebex.IO.Compression.ZipArchive" /> object with the specified ZIP archive stream.
            </summary>
      <param name="zipStream">A readable/seekable stream containing a ZIP archive or 
            empty writable/seekable stream where to create a new ZIP archive.</param>
      <param name="closeMode">A close behavior of the <paramref name="zipStream" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zipStream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Specified stream is not seekable or readable.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Archive cannot be opened (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Cancel">
      <summary>
            Requests the currently processing operation to be canceled as soon as possible.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.GetItem(System.String)">
      <summary>
            Gets the <see cref="T:Rebex.IO.Compression.ZipItem" /> object that represents the specified path.
            </summary>
      <param name="archivePath">Path to an item within the ZIP archive.</param>
      <returns>A <see cref="T:Rebex.IO.Compression.ZipItem" /> object or a null reference 
            (Nothing in Visual Basic) if the path is not present in the ZIP archive.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Save">
      <summary>
            Saves pending changes into the ZIP archive and flushes the underlying stream.
            </summary>
      <remarks>
            There is no need to call this method if the <see cref="P:Rebex.IO.Compression.ZipArchive.SaveMode" /> property 
            is set to <see cref="F:Rebex.IO.Compression.ArchiveSaveMode.Immediate" /> (which is the default value).
            </remarks>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Save(Rebex.IO.Compression.ArchiveSaveAction)">
      <summary>
            Saves pending changes into the ZIP archive and flushes the underlying stream.
            </summary>
      <param name="action">Save action.</param>
      <remarks>
            There is no need to call this method if the <see cref="P:Rebex.IO.Compression.ZipArchive.SaveMode" /> property 
            is set to <see cref="F:Rebex.IO.Compression.ArchiveSaveMode.Immediate" /> (which is the default value).
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="action" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.FileExists(System.String)">
      <summary>
            Gets a value indicating whether the specified file is present in the ZIP archive.
            </summary>
      <param name="archiveFilePath">The path of the file to check.</param>
      <returns>True if the file exists; false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.DirectoryExists(System.String)">
      <summary>
            Gets a value indicating whether the specified directory is present in the ZIP archive.
            </summary>
      <param name="archiveDirectoryPath">The path of the directory to check.</param>
      <returns>True if the directory exists; false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.CreateDirectory(System.String)">
      <summary>
            Creates a directory within the ZIP archive.
            </summary>
      <param name="archiveDirectoryPath">Path to a directory to be created.</param>
      <returns>Newly created directory.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.PathTooLongException">Path is too long (longer than 65.535 characters).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.DeleteFile(System.String)">
      <summary>
            Deletes a file within the ZIP archive.
            </summary>
      <param name="archiveFilePath">Path to an archive file.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.
            -or- Illegal use of wildcards in path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- The specified path is not a file.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.DeleteFile(System.String,Rebex.IO.Compression.ArchiveSaveAction)">
      <summary>
            Deletes a file within the ZIP archive.
            </summary>
      <param name="archiveFilePath">Path to an archive file.</param>
      <param name="action">Save action.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.
            -or- Illegal use of wildcards in path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- The specified path is not a file.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Delete(System.String,Rebex.IO.TraversalMode)">
      <summary>
            Deletes files and/or directories within the ZIP archive.
            </summary>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="mode">Traversal mode.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Delete(System.String,Rebex.IO.TraversalMode,Rebex.IO.Compression.ArchiveSaveAction)">
      <summary>
            Deletes files and/or directories within the ZIP archive.
            </summary>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="mode">Traversal mode.</param>
      <param name="action">Save action.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> or <paramref name="action" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Delete(Rebex.IO.FileSet)">
      <summary>
            Deletes files and/or directories within the ZIP archive.
            </summary>
      <param name="set">A filtering set which specifies external (local) files and directories to be deleted.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="set" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Base path of the set contains invalid characters.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Delete(Rebex.IO.FileSet,Rebex.IO.Compression.ArchiveSaveAction)">
      <summary>
            Deletes files and/or directories within the ZIP archive.
            </summary>
      <param name="set">A filtering set which specifies external (local) files and directories to be deleted.</param>
      <param name="action">Save action.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="set" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Base path of the set contains invalid characters.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Move(System.String,System.String)">
      <summary>
            Moves or renames an archive item (file or directory).
            </summary>
      <param name="fromPath">Original path to a ZIP archive item to move or rename.</param>
      <param name="toPath">New path to move or rename the ZIP archive item to.</param>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Attempt to move or rename the root directory of the archive.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.PathTooLongException">New path is too long (longer than 65.535 characters).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddFile(System.String)">
      <summary>
            Adds the specified file to the root directory of the ZIP archive.
            </summary>
      <param name="sourceFilePath">Path to a local file to be added.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFilePath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="sourceFilePath" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="sourceFilePath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the specified path was not found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified file path was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddFile(System.String,System.String)">
      <summary>
            Adds the specified local file to the specified directory within the ZIP archive.
            </summary>
      <param name="sourceFilePath">Path to a local file to be added.</param>
      <param name="archivePath">Path to a (non-existing) file archive item or path to a directory item ending with directory separator (typically '\').
            Null reference (Nothing in Visual Basic) means root.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFilePath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="sourceFilePath" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="sourceFilePath" /> exceed the maximum length defined by system.
            -or- <paramref name="archivePath" /> is longer than 65.535 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the source path was not found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddFile(System.String,System.String,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Adds the specified local file to the specified directory within the ZIP archive.
            </summary>
      <param name="sourceFilePath">Path to a local file to be added.</param>
      <param name="archivePath">Path to a (non-existing) file archive item or path to a directory item ending with directory separator (typically '\').
            Null reference (Nothing in Visual Basic) means root.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFilePath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="sourceFilePath" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="sourceFilePath" /> exceed the maximum length defined by system.
            -or- <paramref name="archivePath" /> is longer than 65.535 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the source path was not found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddFile(System.IO.Stream,System.String)">
      <summary>
            Adds data from the specified stream to the ZIP archive.
            </summary>
      <param name="inputStream">Stream to read the data from.</param>
      <param name="archiveFilePath">Absolute path to a (non-existing) file item within the ZIP archive.</param>
      <returns>Operation result.</returns>
      <remarks>Note that only data following the current position of the input stream is compressed.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputStream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="archiveFilePath" /> is empty or contains invalid characters.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="inputStream" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="archiveFilePath" /> is longer than 65.535 characters.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddFile(System.IO.Stream,System.String,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Adds data from the specified stream to the ZIP archive.
            </summary>
      <param name="inputStream">Stream to read the data from.</param>
      <param name="archiveFilePath">Absolute path to a (non-existing) file item within the ZIP archive.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <returns>Operation result.</returns>
      <remarks>Note that only data following the current position of the input stream is compressed.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputStream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="archiveFilePath" /> is empty or contains invalid characters.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="inputStream" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="archiveFilePath" /> is longer than 65.535 characters.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Add(System.String)">
      <summary>
            Adds specified local files or directories to the ZIP archive.
            </summary>
      <param name="sourcePathOrMask">Path (with or without a mask) to an external (local) file or directory.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePathOrMask" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Illegal use of wildcards in path.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="sourcePathOrMask" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="sourcePathOrMask" /> exceeds the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Add(Rebex.IO.FileSet)">
      <summary>
            Adds specified local files or directories to the ZIP archive.
            </summary>
      <param name="set">A filtering set which specifies external (local) files and directories to be added.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="set" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Base path of the set contains invalid characters 
            -or- the system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- Base path of the set refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">Base path of the set exceeds the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Add(System.String,System.String)">
      <summary>
            Adds specified local files or directories to a directory within the ZIP archive.
            </summary>
      <param name="sourcePathOrMask">Path (with or without a mask) to an external (local) file or directory.</param>
      <param name="archiveDirectoryPath">Path to an archive directory where to add files.
            Null reference (Nothing in Visual Basic) means root.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePathOrMask" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Illegal use of wildcards in path.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="sourcePathOrMask" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="sourcePathOrMask" /> exceeds the maximum length defined by system.
            -or- The target path is longer than 65.535 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Add(Rebex.IO.FileSet,System.String)">
      <summary>
            Adds specified local files or directories to a directory within the ZIP archive.
            </summary>
      <param name="set">A filtering set which specifies external (local) files and directories to be added.</param>
      <param name="archiveDirectoryPath">Path to an archive directory where to add files.
            Null reference (Nothing in Visual Basic) means root.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="set" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Base path of the set contains invalid characters 
            -or- the system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- Base path of the set refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">Base path of the set exceeds the maximum length defined by system.
            -or- The target path is longer than 65.535 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Add(System.String,System.String,Rebex.IO.TraversalMode)">
      <summary>
            Adds specified local files or directories to a directory within the ZIP archive.
            </summary>
      <param name="sourcePathOrMask">Path (with or without a mask) to an external (local) file or directory.</param>
      <param name="archiveDirectoryPath">Path to an archive directory where to add files.
            Null reference (Nothing in Visual Basic) means root.</param>
      <param name="mode">Traversal mode.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePathOrMask" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="sourcePathOrMask" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="sourcePathOrMask" /> exceeds the maximum length defined by system.
            -or- The target path is longer than 65.535 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Add(System.String,System.String,Rebex.IO.TraversalMode,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Adds specified local files or directories to a directory within the ZIP archive.
            </summary>
      <param name="sourcePathOrMask">Path (with or without a mask) to an external (local) file or directory.</param>
      <param name="archiveDirectoryPath">Path to an archive directory where to add files.
            Null reference (Nothing in Visual Basic) means root.</param>
      <param name="mode">Traversal mode.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exist in the ZIP archive.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePathOrMask" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> or <paramref name="transferMethod" /> or <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="sourcePathOrMask" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="sourcePathOrMask" /> exceeds the maximum length defined by system.
            -or- The target path is longer than 65.535 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Add(Rebex.IO.FileSet,System.String,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Adds specified local files or directories to a directory within the ZIP archive.
            </summary>
      <param name="set">A filtering set which specifies external (local) files and directories to be added.</param>
      <param name="archiveDirectoryPath">Path to an archive directory where to add files.
            Null reference (Nothing in Visual Basic) means root.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exist in the ZIP archive.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="set" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Base path of the set contains invalid characters 
            -or- the system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="transferMethod" /> or <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- Base path of the set refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">Base path of the set exceeds the maximum length defined by system.
            -or- The target path is longer than 65.535 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractFile(System.String,System.String)">
      <summary>
            Extracts the specified archive file item into a local file.
            </summary>
      <param name="archiveFilePath">Path to an archive file to be extracted.</param>
      <param name="targetPath">Path to a (non-existing) local file or path to a directory ending with directory separator (typically '\').</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">The specified path is not a file.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the target path was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">Local file already exists or an I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractFile(System.String,System.String,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Extracts the specified archive file item into a local file.
            </summary>
      <param name="archiveFilePath">Path to an archive file to be extracted.</param>
      <param name="targetPath">Path to a (non-existing) local file or path to a directory ending with directory separator (typically '\').</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">The specified path is not a file.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the target path was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractFile(System.String,System.IO.Stream)">
      <summary>
            Extracts the specified archive file item into a stream.
            </summary>
      <param name="archiveFilePath">Path to an archive file to be extracted.</param>
      <param name="outputStream">Stream to write the extracted data to.</param>
      <returns>Operation result.</returns>
      <remarks>Note that data will be written to the current output stream position.</remarks>
      <exception cref="T:System.ArgumentNullException">The specified path or output stream is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.</exception>
      <exception cref="T:System.InvalidOperationException">The output stream is not writable.
            -or- The specified path is not a file.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractAll(System.String)">
      <summary>
            Extracts the whole content of the ZIP archive into the specified local directory.
            </summary>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract the ZIP archive.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractAll(System.String,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Extracts the whole content of the ZIP archive into the specified local directory.
            </summary>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract the ZIP archive.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractAll(System.String,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Extracts the whole content of the ZIP archive into the specified local directory.
            </summary>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract the ZIP archive.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="transferMethod" /> or <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Extract(System.String,System.String)">
      <summary>
            Extracts specified archive item(s) into the specified local directory.
            </summary>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract files.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Illegal use of wildcards in path.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Extract(Rebex.IO.FileSet,System.String)">
      <summary>
            Extracts specified archive item(s) into the specified local directory.
            </summary>
      <param name="set">A filtering set which specifies external (local) files and directories to be extracted.</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract files.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="set" /> is null or the specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Extract(System.String,System.String,Rebex.IO.TraversalMode)">
      <summary>
            Extracts specified archive item(s) into the specified local directory.
            </summary>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract files.</param>
      <param name="mode">Traversal mode.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Extract(System.String,System.String,Rebex.IO.TraversalMode,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Extracts specified archive item(s) into the specified local directory.
            </summary>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract files.</param>
      <param name="mode">Traversal mode.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> or <paramref name="transferMethod" /> or <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Extract(Rebex.IO.FileSet,System.String,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Extracts specified archive item(s) into the specified local directory.
            </summary>
      <param name="set">A filtering set which specifies external (local) files and directories to be extracted.</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract files.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="set" /> is null or the specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="transferMethod" /> or <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.GetItems">
      <summary>
            Gets the collection of all archive items stored within the ZIP archive.
            </summary>
      <returns>The collection of all items stored within the ZIP archive.</returns>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.GetItems(System.String,Rebex.IO.TraversalMode)">
      <summary>
            Gets the collection of archive items stored within the ZIP archive matching the specified path or mask using the specified traversal mode.
            </summary>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s) or null (Nothing in Visual Basic).</param>
      <param name="mode">Traversal mode.</param>
      <returns>The collection of items stored within the ZIP archive.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.GetItems(System.String,Rebex.IO.TraversalMode,Rebex.IO.Compression.ArchiveItemTypes)">
      <summary>
            Gets the collection of archive items stored within the ZIP archive matching the specified path or mask and type using the specified traversal mode.
            </summary>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s) or null (Nothing in Visual Basic).</param>
      <param name="mode">Traversal mode.</param>
      <param name="types">Specifies which types should be included in the collection.</param>
      <returns>The collection of archive items stored within the ZIP archive.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> or <paramref name="types" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.GetItems(Rebex.IO.FileSet)">
      <summary>
            Gets the collection of archive items stored within the ZIP archive matching the specified <paramref name="set" />.
            </summary>
      <param name="set">A <see cref="T:Rebex.IO.FileSet" /> defining the filter criteria.</param>
      <returns>The collection of archive items stored within the ZIP archive.</returns>
      <exception cref="T:System.ArgumentNullException">The specified set is null.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.GetItems(Rebex.IO.FileSet,Rebex.IO.Compression.ArchiveItemTypes)">
      <summary>
            Gets the collection of archive items stored within the ZIP archive matching the specified <paramref name="set" />.
            </summary>
      <param name="set">A <see cref="T:Rebex.IO.FileSet" /> defining the filter criteria.</param>
      <param name="types">Specifies which types should be included in the collection.</param>
      <returns>The collection of archive items stored within the ZIP archive.</returns>
      <exception cref="T:System.ArgumentNullException">The specified set is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="types" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Close">
      <summary>
            Closes the current <see cref="T:Rebex.IO.Compression.ZipArchive" /> object and releases any resources associated with it (file or stream).
            This is the same as calling <see cref="M:Rebex.IO.Compression.ZipArchive.Close(Rebex.IO.Compression.ArchiveSaveAction)" /> with <see cref="F:Rebex.IO.Compression.ArchiveSaveAction.Auto" /> argument.
            </summary>
      <remarks>
            Note that underlying stream is not closed if the <see cref="T:Rebex.IO.Compression.ZipArchive" /> isn't its owner
            (if the constructor was called with the leaveOpen argument of true).
            </remarks>
      <exception cref="T:System.InvalidOperationException">Attempt to shrink the archive, but archive is not opened for writing.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while shrinking the archive.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Close(Rebex.IO.Compression.ArchiveSaveAction)">
      <summary>
            Closes the current <see cref="T:Rebex.IO.Compression.ZipArchive" /> object and releases any resources associated with it (file or stream).
            </summary>
      <param name="action">Save action. Specifies whether to save pending changes and shrink the ZIP archive.</param>
      <remarks>
            Note that underlying stream is not closed if the <see cref="T:Rebex.IO.Compression.ZipArchive" /> isn't its owner
            (if the constructor was called with the leaveOpen argument of true).
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="action" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Attempt to shrink the archive, but archive is not opened for writing.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while shrinking the archive.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Rebex.IO.Compression.ZipArchive" /> and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Encrypt(System.String,System.String,System.String,Rebex.IO.Compression.EncryptionAlgorithm)">
      <summary>
            Encrypts an existing ZIP archive to the specified file.
            </summary>
      <param name="zipFileToEncrypt">Path to a ZIP archive file to be encrypted.</param>
      <param name="encryptedZipFile">Path where to save encrypted ZIP archive file.</param>
      <param name="password">Password to be used for encryption.</param>
      <param name="algorithm">Encryption algorithm to be used for encryption.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Decrypt(System.String,System.String,System.String)">
      <summary>
            Decrypts an existing ZIP archive to the specified zip archive.
            </summary>
      <param name="zipFileToDecrypt">Path to an encrypted ZIP archive file to be decrypted.</param>
      <param name="decryptedZipFile">Path where to save decrypted ZIP archive file.</param>
      <param name="password">Password to be used for decryption.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.CreateDirectory(System.String,System.String)">
      <summary>
            Creates new empty directory within the specified ZIP archive.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="archiveDirectoryPath">Path to a non-existing directory to be created.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Delete(System.String,System.String)">
      <summary>
            Deletes files and/or empty directories from the specified ZIP archive.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Delete(System.String,System.String,Rebex.IO.TraversalMode)">
      <summary>
            Deletes files and/or directories from the specified ZIP archive.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="mode">Traversal mode.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Delete(System.String,System.String,Rebex.IO.Compression.ArchiveSaveAction)">
      <summary>
            Deletes files and/or empty directories from the specified ZIP archive.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="action">A save action.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Delete(System.String,System.String,Rebex.IO.TraversalMode,Rebex.IO.Compression.ArchiveSaveAction)">
      <summary>
            Deletes files and/or directories from the specified ZIP archive.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="mode">Traversal mode.</param>
      <param name="action">A save action.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Move(System.String,System.String,System.String)">
      <summary>
            Moves (renames) an archive item (file or directory) within the specified ZIP archive.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="fromPath">Original path to an archive item to move/rename.</param>
      <param name="toPath">New path to move (rename) the archive item to.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Add(System.String,System.String,System.String)">
      <summary>
            Adds specified local files or directories to a directory within the specified ZIP archive.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive.</param>
      <param name="sourcePathOrMask">Path (with or without a mask) to an external (local) file or directory.</param>
      <param name="archiveDirectoryPath">Path to an archive directory where to add files.
            Null reference (Nothing in Visual Basic) means root.</param>
      <returns>Operation result.</returns>
      <remarks>The ZIP archive file doesn't have to exist.</remarks>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Add(System.String,System.String,System.String,Rebex.IO.TraversalMode,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Adds specified local files or directories to a directory within the specified ZIP archive.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive.</param>
      <param name="sourcePathOrMask">Path (with or without a mask) to an external (local) file or directory.</param>
      <param name="archiveDirectoryPath">Path to an archive directory where to add files.
            Null reference (Nothing in Visual Basic) means root.</param>
      <param name="mode">Traversal mode.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exist in the ZIP archive.</param>
      <returns>Operation result.</returns>
      <remarks>The ZIP archive file doesn't have to exist.</remarks>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractAll(System.String,System.String)">
      <summary>
            Extracts the whole content of the specified ZIP archive into the specified local directory.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract the ZIP archive.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractAll(System.String,System.String,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Extracts the whole content of the specified ZIP archive into the specified local directory.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract the ZIP archive.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Extract(System.String,System.String,System.String)">
      <summary>
            Extracts specified archive item(s) from the specified ZIP archive into the specified local directory.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract files.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.Extract(System.String,System.String,System.String,Rebex.IO.TraversalMode,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Extracts specified archive item(s) from the specified ZIP archive into the specified local directory.
            </summary>
      <param name="zipFilePath">Path to a ZIP archive file.</param>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract files.</param>
      <param name="mode">Traversal mode.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.SaveAsync(Rebex.IO.Compression.ArchiveSaveAction,System.Object)">
      <summary>
            Begins asynchronous Save operation.
            Saves pending changes into the ZIP archive and flushes the underlying stream.
            </summary>
      <param name="action">Save action.</param>
      <remarks>
            There is no need to call this method if the <see cref="P:Rebex.IO.Compression.ZipArchive.SaveMode" /> property 
            is set to <see cref="F:Rebex.IO.Compression.ArchiveSaveMode.Immediate" /> (which is the default value).
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="action" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.DeleteFileAsync(System.String,Rebex.IO.Compression.ArchiveSaveAction,System.Object)">
      <summary>
            Begins asynchronous DeleteFile operation.
            Deletes a file within the ZIP archive.
            </summary>
      <param name="archiveFilePath">Path to an archive file.</param>
      <param name="action">Save action.</param>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.
            -or- Illegal use of wildcards in path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- The specified path is not a file.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.DeleteAsync(System.String,Rebex.IO.TraversalMode,Rebex.IO.Compression.ArchiveSaveAction,System.Object)">
      <summary>
            Begins asynchronous Delete operation.
            Deletes files and/or directories within the ZIP archive.
            </summary>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="mode">Traversal mode.</param>
      <param name="action">Save action.</param>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> or <paramref name="action" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.DeleteAsync(Rebex.IO.FileSet,Rebex.IO.Compression.ArchiveSaveAction,System.Object)">
      <summary>
            Begins asynchronous Delete operation.
            Deletes files and/or directories within the ZIP archive.
            </summary>
      <param name="set">A filtering set which specifies external (local) files and directories to be deleted.</param>
      <param name="action">Save action.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="set" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Base path of the set contains invalid characters.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.MoveAsync(System.String,System.String,System.Object)">
      <summary>
            Begins asynchronous Move operation.
            Moves or renames an archive item (file or directory).
            </summary>
      <param name="fromPath">Original path to a ZIP archive item to move or rename.</param>
      <param name="toPath">New path to move or rename the ZIP archive item to.</param>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Attempt to move or rename the root directory of the archive.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.PathTooLongException">New path is too long (longer than 65.535 characters).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddFileAsync(System.String,System.String,System.Object)">
      <summary>
            Begins asynchronous AddFile operation.
            Adds the specified local file to the specified directory within the ZIP archive.
            </summary>
      <param name="sourceFilePath">Path to a local file to be added.</param>
      <param name="archivePath">Path to a (non-existing) file archive item or path to a directory item ending with directory separator (typically '\').
            Null reference (Nothing in Visual Basic) means root.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFilePath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="sourceFilePath" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="sourceFilePath" /> exceed the maximum length defined by system.
            -or- <paramref name="archivePath" /> is longer than 65.535 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the source path was not found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddFileAsync(System.String,System.String,Rebex.IO.ActionOnExistingFiles,System.Object)">
      <summary>
            Begins asynchronous AddFile operation.
            Adds the specified local file to the specified directory within the ZIP archive.
            </summary>
      <param name="sourceFilePath">Path to a local file to be added.</param>
      <param name="archivePath">Path to a (non-existing) file archive item or path to a directory item ending with directory separator (typically '\').
            Null reference (Nothing in Visual Basic) means root.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFilePath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="sourceFilePath" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="sourceFilePath" /> exceed the maximum length defined by system.
            -or- <paramref name="archivePath" /> is longer than 65.535 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the source path was not found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddFileAsync(System.IO.Stream,System.String,System.Object)">
      <summary>
            Begins asynchronous AddFile operation.
            Adds data from the specified stream to the ZIP archive.
            </summary>
      <param name="inputStream">Stream to read the data from.</param>
      <param name="archiveFilePath">Absolute path to a (non-existing) file item within the ZIP archive.</param>
      <remarks>Note that only data following the current position of the input stream is compressed.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputStream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="archiveFilePath" /> is empty or contains invalid characters.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="inputStream" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="archiveFilePath" /> is longer than 65.535 characters.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddFileAsync(System.IO.Stream,System.String,Rebex.IO.ActionOnExistingFiles,System.Object)">
      <summary>
            Begins asynchronous AddFile operation.
            Adds data from the specified stream to the ZIP archive.
            </summary>
      <param name="inputStream">Stream to read the data from.</param>
      <param name="archiveFilePath">Absolute path to a (non-existing) file item within the ZIP archive.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <remarks>Note that only data following the current position of the input stream is compressed.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputStream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="archiveFilePath" /> is empty or contains invalid characters.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="inputStream" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="archiveFilePath" /> is longer than 65.535 characters.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddAsync(System.String,System.String,Rebex.IO.TraversalMode,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles,System.Object)">
      <summary>
            Begins asynchronous Add operation.
            Adds specified local files or directories to a directory within the ZIP archive.
            </summary>
      <param name="sourcePathOrMask">Path (with or without a mask) to an external (local) file or directory.</param>
      <param name="archiveDirectoryPath">Path to an archive directory where to add files.
            Null reference (Nothing in Visual Basic) means root.</param>
      <param name="mode">Traversal mode.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exist in the ZIP archive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePathOrMask" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> or <paramref name="transferMethod" /> or <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- <paramref name="sourcePathOrMask" /> refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="sourcePathOrMask" /> exceeds the maximum length defined by system.
            -or- The target path is longer than 65.535 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.AddAsync(Rebex.IO.FileSet,System.String,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles,System.Object)">
      <summary>
            Begins asynchronous Add operation.
            Adds specified local files or directories to a directory within the ZIP archive.
            </summary>
      <param name="set">A filtering set which specifies external (local) files and directories to be added.</param>
      <param name="archiveDirectoryPath">Path to an archive directory where to add files.
            Null reference (Nothing in Visual Basic) means root.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exist in the ZIP archive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="set" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Base path of the set contains invalid characters 
            -or- the system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="transferMethod" /> or <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- Base path of the set refers to the ZIP archive itself.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">Base path of the set exceeds the maximum length defined by system.
            -or- The target path is longer than 65.535 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractFileAsync(System.String,System.String,System.Object)">
      <summary>
            Begins asynchronous ExtractFile operation.
            Extracts the specified archive file item into a local file.
            </summary>
      <param name="archiveFilePath">Path to an archive file to be extracted.</param>
      <param name="targetPath">Path to a (non-existing) local file or path to a directory ending with directory separator (typically '\').</param>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">The specified path is not a file.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the target path was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">Local file already exists or an I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractFileAsync(System.String,System.String,Rebex.IO.ActionOnExistingFiles,System.Object)">
      <summary>
            Begins asynchronous ExtractFile operation.
            Extracts the specified archive file item into a local file.
            </summary>
      <param name="archiveFilePath">Path to an archive file to be extracted.</param>
      <param name="targetPath">Path to a (non-existing) local file or path to a directory ending with directory separator (typically '\').</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">The specified path is not a file.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the target path was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractFileAsync(System.String,System.IO.Stream,System.Object)">
      <summary>
            Begins asynchronous ExtractFile operation.
            Extracts the specified archive file item into a stream.
            </summary>
      <param name="archiveFilePath">Path to an archive file to be extracted.</param>
      <param name="outputStream">Stream to write the extracted data to.</param>
      <remarks>Note that data will be written to the current output stream position.</remarks>
      <exception cref="T:System.ArgumentNullException">The specified path or output stream is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.</exception>
      <exception cref="T:System.InvalidOperationException">The output stream is not writable.
            -or- The specified path is not a file.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractAsync(System.String,System.String,Rebex.IO.TraversalMode,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles,System.Object)">
      <summary>
            Begins asynchronous Extract operation.
            Extracts specified archive item(s) into the specified local directory.
            </summary>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s).</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract files.</param>
      <param name="mode">Traversal mode.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> or <paramref name="transferMethod" /> or <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.ExtractAsync(Rebex.IO.FileSet,System.String,Rebex.IO.TransferMethod,Rebex.IO.ActionOnExistingFiles,System.Object)">
      <summary>
            Begins asynchronous Extract operation.
            Extracts specified archive item(s) into the specified local directory.
            </summary>
      <param name="set">A filtering set which specifies external (local) files and directories to be extracted.</param>
      <param name="targetDirectoryPath">Path to an existing local directory to which to extract files.</param>
      <param name="transferMethod">Specifies whether to copy or move source items.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="set" /> is null or the specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="transferMethod" /> or <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Operation result.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.GetItemsAsync(System.Object)">
      <summary>
            Begins asynchronous GetItems operation.
            Gets the collection of all archive items stored within the ZIP archive.
            </summary>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>The collection of all items stored within the ZIP archive.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.GetItemsAsync(System.String,Rebex.IO.TraversalMode,Rebex.IO.Compression.ArchiveItemTypes,System.Object)">
      <summary>
            Begins asynchronous GetItems operation.
            Gets the collection of archive items stored within the ZIP archive matching the specified path or mask and type using the specified traversal mode.
            </summary>
      <param name="archivePathOrMask">Path (with or without a mask) to an archive item(s) or null (Nothing in Visual Basic).</param>
      <param name="mode">Traversal mode.</param>
      <param name="types">Specifies which types should be included in the collection.</param>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.
            -or- Illegal use of wildcards in path.
            -or- Ambiguous usage of path and mode.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> or <paramref name="types" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>The collection of archive items stored within the ZIP archive.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipArchive.GetItemsAsync(Rebex.IO.FileSet,Rebex.IO.Compression.ArchiveItemTypes,System.Object)">
      <summary>
            Begins asynchronous GetItems operation.
            Gets the collection of archive items stored within the ZIP archive matching the specified <paramref name="set" />.
            </summary>
      <param name="set">A <see cref="T:Rebex.IO.FileSet" /> defining the filter criteria.</param>
      <param name="types">Specifies which types should be included in the collection.</param>
      <exception cref="T:System.ArgumentNullException">The specified set is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="types" /> specified an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>The collection of archive items stored within the ZIP archive.</returns>
    </member>
    <member name="E:Rebex.IO.Compression.ZipArchive.ProblemDetected">
      <summary>
            Occurs when a problem is detected in Add, Extract, Delete or GetItems methods, making it possible for the handler to choose a desired action.
            </summary>
    </member>
    <member name="E:Rebex.IO.Compression.ZipArchive.ProgressChanged">
      <summary>
            Occurs when a significant action occurs in Add, Extract, Delete, GetItems methods.
            </summary>
      <remarks>
            Use this to be informed about current operations and suboperations.
            </remarks>
    </member>
    <member name="E:Rebex.IO.Compression.ZipArchive.ShrinkProgress">
      <summary>
            Occurs when a data block is processed while shrinking the archive.
            </summary>
    </member>
    <member name="E:Rebex.IO.Compression.ZipArchive.PasswordRequired">
      <summary>
            Occurs when a password is needed for decompressing an item.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.DefaultLogWriter">
      <summary>
            Gets or sets a default log writer used by all new instances of <see cref="T:Rebex.IO.Compression.ZipArchive" /> object.
            </summary>
      <value>Default log writer.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.LogWriter">
      <summary>
            Gets or sets the logger used by this object.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.Options">
      <summary>
            Gets the archive options object.
            </summary>
      <returns>Archive options object.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.IsDisposed">
      <summary>
            Gets a value indicating whether the <see cref="T:Rebex.IO.Compression.ZipArchive" /> object is disposed.
            </summary>
      <returns>True if this instance is disposed.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.IsReadOnly">
      <summary>
            Gets a value indicating whether the ZIP archive is only open for reading.
            </summary>
      <returns>True - the ZIP archive is only open for reading; 
            false - write operations such as Add, Move or Delete are enabled.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.IsBusy">
      <summary>
            Gets a value indicating whether there is any asynchronous operation on the current object in progress.
            </summary>
      <returns>True if there is any asynchronous operation in progress; false otherwise.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.FilePath">
      <summary>
            Gets an absolute path to the ZIP archive file or a null reference 
            (Nothing in Visual Basic) if the path is not available.
            </summary>
      <returns>Absolute path to the ZIP archive file.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.SaveMode">
      <summary>
            Gets or sets a save mode, which determines when changes are saved to the underlying stream.
            </summary>
      <value>Save mode.</value>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Attempt to set the <see cref="F:Rebex.IO.Compression.ArchiveSaveMode.Immediate" /> without calling the <see cref="M:Rebex.IO.Compression.ZipArchive.Save" /> method first.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.CompressionLevel">
      <summary>
            Gets or sets the compression level to be used by <see cref="M:Rebex.IO.Compression.ZipArchive.Add(System.String)" /> and <see cref="M:Rebex.IO.Compression.ZipArchive.AddFile(System.String)" /> methods.
            Possible values are 0-9, where 0 means no compression (fastest) and 9 means best compression (slowest). 
            6 (medium compression and speed) is a default value.
            </summary>
      <value>Compression level (0-9), where 0 means no compression (fastest) and 9 means best compression (slowest). 
            6 (medium compression and speed) is a default value.</value>
      <remarks>
            0 means no compression; 
            1 is the fastest compression (but the worst compression ratio);
            9 is the slowest compression (but the best compression ratio).
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value" /> is out of range of valid values (0-9).</exception>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.CompressionMethod">
      <summary>
            Gets or sets the compression method to be used by <see cref="M:Rebex.IO.Compression.ZipArchive.Add(System.String)" /> and <see cref="M:Rebex.IO.Compression.ZipArchive.AddFile(System.String)" /> methods.
            </summary>
      <value>Compression method.</value>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value" /> specified an invalid value.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Not supported compression method by the Rebex ZIP for .NET component.</exception>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.EncryptionAlgorithm">
      <summary>
            Gets or sets the encryption algorithm to be used by <see cref="M:Rebex.IO.Compression.ZipArchive.Add(System.String)" /> and <see cref="M:Rebex.IO.Compression.ZipArchive.AddFile(System.String)" /> methods.
            </summary>
      <value>Encryption algorithm.</value>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value" /> specified an invalid value.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Not supported encryption algorithm by the Rebex ZIP for .NET component.</exception>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.Password">
      <summary>
            Gets or sets a password. Null reference (Nothing in Visual Basic) means don't encrypt newly added files.
            </summary>
      <value>Password.</value>
      <remarks>If the password is set to a null reference (Nothing in Visual Basic) 
            the <see cref="E:Rebex.IO.Compression.ZipArchive.PasswordRequired" /> event is fired when extracting encrypted file.</remarks>
      <exception cref="T:Rebex.IO.Compression.ZipException">Password cannot be encoded using the current charset.</exception>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.Comment">
      <summary>
            Gets or sets the comment for the whole ZIP archive.
            </summary>
      <value>Comment for the ZIP archive.</value>
      <exception cref="T:System.ArgumentException">The specified value is too long (longer than 65.535 characters).</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchive.Item(System.String)">
      <summary>
            Gets the <see cref="T:Rebex.IO.Compression.ZipItem" /> object that represents the specified path.
            </summary>
      <param name="archivePath">Path to an item within the ZIP archive.</param>
      <returns>A <see cref="T:Rebex.IO.Compression.ZipItem" /> object or a null reference 
            (Nothing in Visual Basic) if the path is not present in the ZIP archive.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="T:Rebex.IO.Compression.ZipProblemDetectedEventArgs">
      <summary>
            Provides data for the <see cref="E:Rebex.IO.Compression.ZipArchive.ProblemDetected">ProblemDetected</see> event.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ZipProblemDetectedEventArgs.IsActionPossible(Rebex.IO.Compression.ArchiveProblemActions)">
      <summary>
            Determines whether the specified action is currently possible - use this to determine whether the <see cref="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.Action" /> property can be set to the desired action.
            </summary>
      <param name="action">Desired action.</param>
      <returns>True if the specified action is possible; false otherwise.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.Operation">
      <summary>
            Gets the current <see cref="T:Rebex.IO.Compression.ZipArchive" /> operation.
            </summary>
      <value>A <see cref="T:Rebex.IO.Compression.ZipArchive" /> operation.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.Exception">
      <summary>
            Gets the exception which will be raised if the <see cref="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.Action" /> property remains set to ZipAction.ThrowException. 
            See <see cref="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.ProblemType" /> property description for further information.
            </summary>
      <value>Exception.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.ArchiveItemPath">
      <summary>
            Gets the path of the archive file or directory that is currently processed.
            </summary>
      <value>Archive item path.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.ArchiveItemLength">
      <summary>
            Gets the length of the archive file that is currently processed.
            If the problem isn't related to a file or if this information is not available, -1 is returned.
            </summary>
      <value>Archive item length.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.ArchiveItemLastWriteTime">
      <summary>
            Gets the last modification date/time of the archive file that is currently processed.
            If the problem isn't related to a file or if this information is not available, DateTime.MinValuue is returned.
            </summary>
      <value>Archive file last modification date/time.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.ExternalItemPath">
      <summary>
            Gets the path of the external (local) file or directory that is currently processed.
            </summary>
      <value>Local path.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.ExternalItemLength">
      <summary>
            Gets the length of the external (local) file that is currently processed.
            If the problem isn't related to a file or if this information is not available, -1 is returned.
            </summary>
      <value>Local file length.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.ExternalItemLastWriteTime">
      <summary>
            Gets the last modification date/time of the external (local) file that is currently processed.
            If the problem isn't related to a file or if this information is not available, DateTime.MinValuue is returned.
            </summary>
      <value>Local file last modification date/time.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.ProblemType">
      <summary>
            Gets a <see cref="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.ProblemType" /> value that further describes the problem.
            </summary>
      <value>Problem type.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.PossibleActions">
      <summary>
            Gets a mask of possible actions that can be selected to be performed.
            ThrowException and Cancel can always be set. Use the binary 'AND' operator to determine whether a specific action is currently
            possible or simply call the <see cref="M:Rebex.IO.Compression.ZipProblemDetectedEventArgs.IsActionPossible(Rebex.IO.Compression.ArchiveProblemActions)" /> method.
            </summary>
      <value>Mask of possible actions.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.Action">
      <summary>
            Gets or sets the currently selected next action.
            Specifies the operation to perform as the next step of this operation execution.
            </summary>
      <value>Next action to perform.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProblemDetectedEventArgs.NewName">
      <summary>
            Gets or sets the new name for the currently processes file or directory.
            If the currently selected action is set to Rename, this property has to be set; otherwise it is ignored.
            </summary>
      <value>New name.</value>
    </member>
    <member name="T:Rebex.IO.Compression.ZipProgressChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:Rebex.IO.Compression.ZipArchive.ProgressChanged">ProgressChanged</see> event.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.Operation">
      <summary>
            Gets the current <see cref="T:Rebex.IO.Compression.ZipArchive" /> operation.
            </summary>
      <value>A <see cref="T:Rebex.IO.Compression.ZipArchive" /> operation.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.OperationStep">
      <summary>
            Gets the currently executed suboperation of the current <see cref="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.Operation" />.
            </summary>
      <value>A <see cref="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.Operation" /> suboperation.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.ArchiveItemPath">
      <summary>
            Gets the path of the archive file or directory which is currently processed.
            </summary>
      <value>Archive path.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.ExternalItemPath">
      <summary>
            Gets the path of the external (local) file or directory which is currently processed (or null reference (Nothing in Visual Basic) if not available).
            </summary>
      <value>Local path.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.CurrentFileBytesProcessed">
      <summary>
            Gets the number of bytes of the currently processing file that were already processed.
            </summary>
      <value>Number of bytes.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.CurrentFileLength">
      <summary>
            Gets the length of the currently processing file (or -1 if not available).
            </summary>
      <value>File length.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.CurrentFileLastWriteTime">
      <summary>
            Gets the last modification date/time of the currently processing file (or null reference (Nothing in Visual Basic) if not available).
            </summary>
      <value>File modification date/time.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.FilesTotal">
      <summary>
            Gets the total number of files to be processed.
            </summary>
      <value>Number of files.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.FilesProcessed">
      <summary>
            Gets the number of files that were processed (successfully or skipped).
            </summary>
      <value>Number of files.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.FilesProcessedSuccessfully">
      <summary>
            Gets the number of files that were already successfully processed.
            </summary>
      <value>Number of files.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.BytesTotal">
      <summary>
            Gets the total number of bytes to be processed (or -1 if not available).
            </summary>
      <value>Number of bytes.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.BytesProcessed">
      <summary>
            Gets the total number of bytes that were processed.
            </summary>
      <value>Number of bytes.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.CurrentFileProgressPercentage">
      <summary>
            Gets the number between 0 and 100 representing the percentage of completeness of the currently processing file.
            </summary>
      <value>Percentage value (0..100).</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipProgressChangedEventArgs.ProgressPercentage">
      <summary>
            Gets a number between 0 and 100 representing the percentage of completeness of the operation.
            </summary>
      <value>Percentage value (0..100).</value>
    </member>
    <member name="T:Rebex.IO.Compression.ZipShrinkProgressEventArgs">
      <summary>
            Provides data for the <see cref="E:Rebex.IO.Compression.ZipArchive.ShrinkProgress" /> event.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ZipShrinkProgressEventArgs.Operation">
      <summary>
            Gets the current <see cref="T:Rebex.IO.Compression.ZipArchive" /> operation.
            </summary>
      <value>A <see cref="T:Rebex.IO.Compression.ZipArchive" /> operation.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipShrinkProgressEventArgs.ItemsTotal">
      <summary>
            Gets the total number of items to be processed.
            </summary>
      <value>Number of items.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipShrinkProgressEventArgs.ItemsProcessed">
      <summary>
            Gets the number of items that were processed.
            </summary>
      <value>Number of items.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipShrinkProgressEventArgs.ProgressPercentage">
      <summary>
            Gets a number between 0 and 100 representing the percentage of completeness of the operation.
            </summary>
      <value>Percentage value (0..100).</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipShrinkProgressEventArgs.CurrentItemProgressPercentage">
      <summary>
            Gets the number between 0 and 100 representing the percentage of completeness of the currently processing item.
            </summary>
      <value>Percentage value (0..100).</value>
    </member>
    <member name="T:Rebex.IO.Compression.ZipPasswordRequiredEventArgs">
      <summary>
            Provides data for the <see cref="E:Rebex.IO.Compression.ZipArchive.PasswordRequired" /> event.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ZipPasswordRequiredEventArgs.IsActionPossible(Rebex.IO.Compression.ArchivePasswordActions)">
      <summary>
            Determines whether the specified action is currently possible - use this to determine whether the <see cref="P:Rebex.IO.Compression.ZipPasswordRequiredEventArgs.Action" /> property can be set to the desired action.
            </summary>
      <param name="action">Desired action.</param>
      <returns>True if the specified action is possible; false otherwise.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipPasswordRequiredEventArgs.Reason">
      <summary>
            Gets the reason for firing the event.
            </summary>
      <value>A reason for firing the event.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipPasswordRequiredEventArgs.ArchiveItemPath">
      <summary>
            Gets the path of the archive file or directory which is currently processed.
            </summary>
      <value>Archive path.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipPasswordRequiredEventArgs.ExternalItemPath">
      <summary>
            Gets the path of the external (local) file or directory which is currently processed.
            </summary>
      <value>Local path.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipPasswordRequiredEventArgs.Password">
      <summary>
            Gets or sets the password.
            </summary>
      <value>Password.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipPasswordRequiredEventArgs.PossibleActions">
      <summary>
            Gets a mask of possible actions that can be selected to be performed.
            UsePassword and Cancel can always be set. Use the binary 'AND' operator to determine whether a specific action is currently
            possible or simply call the <see cref="M:Rebex.IO.Compression.ZipPasswordRequiredEventArgs.IsActionPossible(Rebex.IO.Compression.ArchivePasswordActions)" /> method.
            </summary>
      <value>Mask of possible actions.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipPasswordRequiredEventArgs.Action">
      <summary>
            Gets or sets an action to be performed.
            </summary>
      <value>An action to be performed.</value>
    </member>
    <member name="T:Rebex.IO.Compression.ZipException">
      <summary>
            An exception that is thrown when an error occurs while using the ZIP component.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ZipException.ToString">
      <summary>
            Returns a string representation of the current exception.
            </summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipException" /> class.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ZipException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception, 
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipException.#ctor(System.String,System.Exception,Rebex.IO.Compression.ArchiveProblemType)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="problemType">An enum value describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception, 
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipException.#ctor(System.String,Rebex.IO.Compression.ZipException)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception, 
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipException.#ctor(System.String,Rebex.IO.Compression.ArchiveProblemType)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="problemType">An enum value describes the error.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipException.#ctor(System.String,Rebex.IO.Compression.ArchiveProblemType,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="problemType">An enum value describes the error.</param>
      <param name="archiveItemPath">Path of the archive item which caused the error.</param>
      <param name="externalItemPath">Path of the external item (path outside the archive) which caused the problem.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipException.#ctor(System.String,System.Exception,Rebex.IO.Compression.ArchiveProblemType,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception, 
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
      <param name="problemType">An enum value describes the error.</param>
      <param name="archiveItemPath">Path of the archive item which caused the error.</param>
      <param name="externalItemPath">Path of the external item (path outside the archive) which caused the problem.</param>
    </member>
    <member name="P:Rebex.IO.Compression.ZipException.ProblemType">
      <summary>
            Gets the type of the problem.
            </summary>
      <returns>The type of the problem.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipException.ArchiveItemPath">
      <summary>
            Gets the path of the archive file or directory which is currently processed.
            </summary>
      <returns>The path of the archive file or directory which is currently processed.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipException.ExternalItemPath">
      <summary>
            Gets the path of the local file or directory which is currently processed.
            </summary>
      <returns>The path of the local file or directory which is currently processed.</returns>
    </member>
    <member name="T:Rebex.IO.Compression.ZipItemCollection">
      <summary>
            Read-only collection of <see cref="T:Rebex.IO.Compression.ZipItem" /> objects.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItemCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipItemCollection" /> class.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItemCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipItemCollection" /> class
            that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">Initial capacity of the wrapped collection.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItemCollection.#ctor(Rebex.IO.Compression.ZipItem)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.Compression.ZipItemCollection" /> class
            that contains the specified item.
            </summary>
      <param name="item">An object to insert into the wrapped collection.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItemCollection.Sort(System.Collections.Generic.IComparer{Rebex.IO.Compression.ZipItem})">
      <summary>
            Sorts the elements in the entire collection using the specified comparer.
            </summary>
      <param name="comparer">
            The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, 
            or a null reference (Nothing in Visual Basic) to use the default comparer.
            </param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItemCollection.IndexOf(Rebex.IO.Compression.ZipItem)">
      <summary>
            Returns the index of a specific item in the collection.
            </summary>
      <param name="item">The object to locate in the collection.</param>
      <returns>The index of item if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItemCollection.Contains(Rebex.IO.Compression.ZipItem)">
      <summary>
            Determines whether the collection contains a specific item.
            </summary>
      <param name="item">The object to locate in the collection.</param>
      <returns>True if item is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItemCollection.CopyTo(Rebex.IO.Compression.ZipItem[],System.Int32)">
      <summary>
            Copies the items of the collection to an System.Array, starting at a particular index.
            </summary>
      <param name="array">The one-dimensional System.Array that is the destination of the items
            copied from the collection. The System.Array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItemCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>A System.Collections.Generic.IEnumerator&lt;T&gt; that can be used to 
            iterate through the collection.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItemCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:Rebex.IO.Compression.ZipItem" /> with specified path. 
            </summary>
      <param name="path">Value of the <see cref="P:Rebex.IO.Compression.ZipItem.Path" /> to search for.</param>
      <returns>The <see cref="T:Rebex.IO.Compression.ZipItem" /> with specified path; 
            or null reference (Nothing in Visual Basic) if no such item was found.</returns>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItemCollection.Item(System.Int32)">
      <summary>
            Gets the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to get.</param>
      <returns>The item at the specified index.</returns>
    </member>
    <member name="T:Rebex.IO.Compression.ZipItem">
      <summary>
            Represents an item (file or directory) within a ZIP archive.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItem.ExtractToStream(System.IO.Stream)">
      <summary>
            Extracts the current file item to the specified stream.
            </summary>
      <param name="outputStream">Stream to write the extracted data to.</param>
      <returns>Operation result.</returns>
      <remarks>Note that data will be written to the current output stream position.</remarks>
      <exception cref="T:System.ArgumentNullException">The specified output stream is null.</exception>
      <exception cref="T:System.InvalidOperationException">The output stream is not writable.
            -or- The item is not a file.
            -or- The item is already deleted.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItem.ExtractToArray">
      <summary>
            Extracts the current file item into a byte array.
            </summary>
      <returns>A byte array that contains extracted data.</returns>
      <exception cref="T:System.InvalidOperationException">The item is not a file.
            -or- The item is already deleted.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItem.ExtractToFile(System.String)">
      <summary>
            Extracts the current file item into a local file.
            </summary>
      <param name="targetFilePath">Path to a (non-existing) local file where to extract the file item.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">The item is not a file.
            -or- The item is already deleted.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetFilePath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the target path was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItem.ExtractToFile(System.String,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Extracts the current file item into a local file.
            </summary>
      <param name="targetFilePath">Path to a (non-existing) local file where to extract the file item.</param>
      <param name="defaultActionOnExistingFiles">Specifies the default behavior for files that already exists in the local directory.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.InvalidOperationException">The item is not a file.
            -or- The item is already deleted.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetFilePath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the target path was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItem.ExtractToDirectory(System.String,Rebex.IO.TraversalMode,Rebex.IO.ActionOnExistingFiles)">
      <summary>
            Extracts the current <see cref="T:Rebex.IO.Compression.ZipItem" /> into the specified local directory using the specified arguments.
            </summary>
      <param name="targetDirectoryPath">Path to an existing directory into which to extract the item.</param>
      <param name="mode">Traversal mode.</param>
      <param name="defaultActionOnExistingFiles">Specifies default behavior for files that already exist at the local directory.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
      <exception cref="T:System.ArgumentException">The specified path is empty or contains invalid characters.
            -or- The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> or <paramref name="defaultActionOnExistingFiles" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">The item is already deleted.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="targetDirectoryPath" /> exceed the maximum length defined by system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the file is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItem.Delete(Rebex.IO.TraversalMode,Rebex.IO.Compression.ArchiveSaveAction)">
      <summary>
            Deletes the current <see cref="T:Rebex.IO.Compression.ZipItem" /> from the ZIP archive.
            </summary>
      <param name="mode">Traversal mode.</param>
      <param name="action">Save action.</param>
      <returns>Operation result.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> or <paramref name="action" /> specified an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- The item is already deleted.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItem.Rename(System.String)">
      <summary>
            Renames the current <see cref="T:Rebex.IO.Compression.ZipItem" />.
            </summary>
      <param name="newName">A new name to be set (name only, not a path).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newName" /> is empty or contains invalid characters.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- Attempt to rename the root directory of the archive.
            -or- The item is already deleted.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="M:Rebex.IO.Compression.ZipItem.Open(System.String)">
      <summary>
            Returns an initialized read-only non-seekable stream to read the decompressed data of the current item.
            </summary>
      <param name="password">Password to open the stream.</param>
      <returns>A read-only non-seekable decompression stream.</returns>
      <exception cref="T:System.InvalidOperationException">The item is not a file.
            -or- The item is already deleted.</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">Cannot perform the requested operation, or the operation was canceled
            (see <see cref="P:Rebex.IO.Compression.ZipException.ProblemType" /> for detailed information).</exception>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.IsRootDirectory">
      <summary>
            Gets a value indicating whether the current <see cref="T:Rebex.IO.Compression.ZipItem" /> is the root directory of the ZIP archive.
            </summary>
      <value>True if the item is the root directory of the ZIP archive; false otherwise.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.IsDeleted">
      <summary>
            Gets a value indicating whether the current <see cref="T:Rebex.IO.Compression.ZipItem" /> represents a deleted item.
            </summary>
      <value>True if the item is deleted; false otherwise.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.IsEncrypted">
      <summary>
            Gets a value indicating whether the current <see cref="T:Rebex.IO.Compression.ZipItem" /> is encrypted.
            </summary>
      <value>True if the item is encrypted; false otherwise.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.EncryptionAlgorithm">
      <summary>
            Gets the name of the algorithm used to encrypt the current <see cref="T:Rebex.IO.Compression.ZipItem" />.
            </summary>
      <value>Name of the encryption algorithm.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.ItemType">
      <summary>
            Gets the type of the current <see cref="T:Rebex.IO.Compression.ZipItem" />.
            </summary>
      <value>Type of the item.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.IsFile">
      <summary>
            Gets a value indicating whether the current <see cref="T:Rebex.IO.Compression.ZipItem" /> is a file.
            </summary>
      <value>True if the item is a file; false otherwise.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.IsDirectory">
      <summary>
            Gets a value indicating whether the current <see cref="T:Rebex.IO.Compression.ZipItem" /> is a directory.
            </summary>
      <value>True if the item is directory; false otherwise.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.IsLink">
      <summary>
            Gets a value indicating whether the item is a link.
            </summary>
      <value>True if the item is a link; false otherwise.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.LinkTarget">
      <summary>
            Gets the target of the link.
            </summary>
      <value>The target of the link; null reference (Nothing in Visual Basic) if the item is not link or not specified.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.UnixPermissions">
      <summary>
            Gets the standard Unix st_mode field from struct stat (contains user/group/other permissions, setuid/setgid, file type).
            </summary>
      <value>The standard Unix st_mode field from struct stat; null reference (Nothing in Visual Basic) if the value is not specified.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.UnixOwnerId">
      <summary>
            Gets the Unix Owner ID.
            </summary>
      <value>The Unix Owner ID; null reference (Nothing in Visual Basic) if the value is not specified.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.UnixGroupId">
      <summary>
            Gets the Unix Group ID.
            </summary>
      <value>The Unix Group ID; null reference (Nothing in Visual Basic) if the value is not specified.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.IsEmptyDirectory">
      <summary>
            Gets a value indicating whether the current <see cref="T:Rebex.IO.Compression.ZipItem" /> is an empty directory.
            </summary>
      <value>True if the item is an empty directory; false otherwise.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.Name">
      <summary>
            Gets the name of the current <see cref="T:Rebex.IO.Compression.ZipItem" />.
            </summary>
      <value>The name of the archive item.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.Path">
      <summary>
            Gets the full path to the current <see cref="T:Rebex.IO.Compression.ZipItem" /> (including its name) within the ZIP archive.
            </summary>
      <value>The full path to the current <see cref="T:Rebex.IO.Compression.ZipItem" /> (including its name) within the ZIP archive.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.Length">
      <summary>
            Gets uncompressed file length.
            </summary>
      <value>Uncompressed file length</value>
      <remarks>
            This is only valid for files.
            </remarks>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.CompressedLength">
      <summary>
            Gets compressed file length.
            </summary>
      <value>Compressed file length</value>
      <remarks>
            This is only valid for files.
            </remarks>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.CompressionMethod">
      <summary>
            Gets the compression method used to compress the file.
            </summary>
      <value>The compression method used to compress the file.</value>
      <remarks>
            This is only valid for files.
            </remarks>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.Crc32">
      <summary>
            Gets the CRC32 (Cyclic Redundancy Check) value of the file.
            </summary>
      <remarks>
            This is only valid for files.
            </remarks>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.CanExtract">
      <summary>
            Returns true if the current <see cref="T:Rebex.IO.Compression.ZipItem" /> can be extracted using Rebex ZIP for .NET component.
            </summary>
      <value>True if the current <see cref="T:Rebex.IO.Compression.ZipItem" /> can be extracted using Rebex ZIP for .NET component; false otherwise</value>
      <remarks>
            File can't be extracted if unsupported compression method or encryption algorithm was used to compress the data
            or if the file type is unknown (<see cref="F:Rebex.IO.Compression.ArchiveItemType.Unknown" />).
            </remarks>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.LastWriteTime">
      <summary>
            Gets or sets the last modification time attribute of the current <see cref="T:Rebex.IO.Compression.ZipItem" />.
            </summary>
      <value>Last modification time attribute of the current <see cref="T:Rebex.IO.Compression.ZipItem" />.</value>
      <exception cref="T:Rebex.IO.Compression.ZipException">
        <see cref="F:Rebex.IO.Compression.ArchiveProblemType.AnotherOperationPending" />: Another operation is pending.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- Item is already deleted.
            -or- Item is the root directory of the archive.</exception>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.LastAccessTime">
      <summary>
            Gets or sets the last access time attribute of the current <see cref="T:Rebex.IO.Compression.ZipItem" />.
            </summary>
      <value>Last access time attribute of the current <see cref="T:Rebex.IO.Compression.ZipItem" />.</value>
      <exception cref="T:Rebex.IO.Compression.ZipException">
        <see cref="F:Rebex.IO.Compression.ArchiveProblemType.AnotherOperationPending" />: Another operation is pending.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- Item is already deleted.
            -or- Item is the root directory of the archive.</exception>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.CreationTime">
      <summary>
            Gets or sets the creation time attribute of the current <see cref="T:Rebex.IO.Compression.ZipItem" />.
            </summary>
      <value>Creation time attribute of the current <see cref="T:Rebex.IO.Compression.ZipItem" />.</value>
      <exception cref="T:Rebex.IO.Compression.ZipException">
        <see cref="F:Rebex.IO.Compression.ArchiveProblemType.AnotherOperationPending" />: Another operation is pending.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- Item is already deleted.
            -or- Item is the root directory of the archive.</exception>
    </member>
    <member name="P:Rebex.IO.Compression.ZipItem.Comment">
      <summary>
            Gets or sets the comment of the current <see cref="T:Rebex.IO.Compression.ZipItem" />.
            </summary>
      <value>Comment for the current <see cref="T:Rebex.IO.Compression.ZipItem" />.</value>
      <exception cref="T:System.ArgumentException">The specified value is too long (longer than 65.535 characters).</exception>
      <exception cref="T:Rebex.IO.Compression.ZipException">
        <see cref="F:Rebex.IO.Compression.ArchiveProblemType.AnotherOperationPending" />: Another operation is pending.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive was already disposed.</exception>
      <exception cref="T:System.InvalidOperationException">Archive is not opened for writing.
            -or- Item is already deleted.
            -or- Item is the root directory of the archive.</exception>
    </member>
    <member name="T:Rebex.IO.Compression.ZipArchiveOptions">
      <summary>
            Options for <see cref="T:Rebex.IO.Compression.ZipArchive" /> class.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.MultiFileLinkMode">
      <summary>
            Gets or sets the default processing mode of detected links in multi-file operations.
            </summary>
      <value>The default processing mode of detected links.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.MultiFileMoveMode">
      <summary>
            Gets or sets the default move behavior in multi-file operations.
            </summary>
      <value>The default move behavior.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.RestoreDateTime">
      <summary>
            Gets or sets a value that indicates which date/time is restored after files are extracted.
            </summary>
      <value>Date/time to restore.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.RestoreFileAttributes">
      <summary>
            Enables or disables restoring of the file attributes after files are extracted (such as: ReadOnly, Archived, Hidden).
            </summary>
      <value>True - file attributes are restored after extract; false - don't restore file attributes.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.MaxPasswordRetryCount">
      <summary>
            Gets or sets the maximal count of failed attempts to set a password for one file in the <see cref="E:Rebex.IO.Compression.ZipArchive.PasswordRequired" /> event.
            Default value is 5.
            </summary>
      <value>Maximal count of attempts.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.PasswordEncoding">
      <summary>
            Gets or sets the encoding used to derive bytes from password when encrypting a file.
            </summary>
      <value>Encoding to use for password when encrypting a file.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.DeleteUnfinishedFileOnExtractError">
      <summary>
            Gets or sets a value indicating whether to delete unfinished files when an error occurred during extract.
            </summary>
      <value>True - delete unfinished file when an error occurred; false - leave unfinished files.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.UnsupportedFeatureExtractMode">
      <summary>
            Gets or sets the behavior of extract on files with unsupported feature 
            (such as unknown encryption algorithm or when the item is neither file nor directory).
            </summary>
      <value>The behavior of the extract method on files with unsupported feature.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.Zip64Mode">
      <summary>
            Gets or sets a value indicating whether to use 64-bit ZIP mode (compatible with ZIP64(tm)) when adding new files to the archive.
            </summary>
      <remarks>ZIP64 is registered trademark of PKWARE, Inc.</remarks>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.CompressorCount">
      <summary>
            Sets the number of parallel compressors to use when compressing data.
            Multiple compressors take advantage of modern multi-core CPUs and substantially enhance compression speed.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.CompressorChunkSize">
      <summary>
            Sets suggested chunk size for multi-threaded compressors. Expected range is 64KB to 1MB.
            </summary>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.RaiseEventsFromCurrentThread">
      <summary>
            Specifies whether to raise asynchronous events from the current working thread or 
            whether to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> available when an asynchronous operation was started.
            </summary>
      <value>False (default) raise events using <see cref="T:System.Threading.SynchronizationContext" />; true to raise them directly from the current working thread.</value>
      <remarks>Events of synchronous methods are always raised from the current working thread.</remarks>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.CreateDirectoryEntries">
      <summary>
            Enables or disables automatic creation of directory entries when adding new files to the archive.
            </summary>
      <value>True - create directory entries within the archive when adding new files if needed; false - don't create directory entries when adding new files.</value>
    </member>
    <member name="P:Rebex.IO.Compression.ZipArchiveOptions.ChecksumVerificationMode">
      <summary>
            Specifies when to perform checksum verification.
            </summary>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveItem.#ctor">
      <summary>Creates an instance of <see cref="T:Rebex.IO.Compression.ArchiveItem" /> class.</summary>
    </member>
    <member name="M:Rebex.IO.Compression.ArchiveOperationResult.#ctor">
      <summary>Creates an instance of <see cref="T:Rebex.IO.Compression.ArchiveOperationResult" /> class.</summary>
    </member>
  </members>
</doc>