<doc>
  <assembly>
    <name>Rebex.Telnet</name>
  </assembly>
  <members>
    <member name="T:Rebex.Net.Telnet">
      <summary>
            Provides methods for communication with Telnet servers.
            </summary>
    </member>
    <member name="F:Rebex.Net.Telnet.DefaultPort">
      <summary>
            Default Telnet port (23).
            </summary>
    </member>
    <member name="M:Rebex.Net.Telnet.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.Telnet" /> class, using default port 23 and no SSL.
            </summary>
      <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
    </member>
    <member name="M:Rebex.Net.Telnet.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.Telnet" /> class, using specified port and no SSL.
            </summary>
      <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
      <param name="serverPort">The server port (eg. 23).</param>
    </member>
    <member name="M:Rebex.Net.Telnet.#ctor(System.String,Rebex.Net.SslMode)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.Telnet" /> class, using default port 23 and specified SSL mode.
            </summary>
      <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
      <param name="security">Connection security.</param>
    </member>
    <member name="M:Rebex.Net.Telnet.#ctor(System.String,System.Int32,Rebex.Net.SslMode)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.Telnet" /> class, using specified port and SSL mode.
            </summary>
      <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
      <param name="serverPort">The server port (eg. 23).</param>
      <param name="security">Connection security.</param>
    </member>
    <member name="M:Rebex.Net.Telnet.SetSocketFactory(Rebex.Net.ISocketFactory)">
      <summary>
            Sets the socket factory to be used to create communication sockets.
            </summary>
      <param name="factory">Socket factory.</param>
    </member>
    <member name="M:Rebex.Net.Telnet.StartShell">
      <summary>
            Starts a remote shell.
            </summary>
      <returns>Shell object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartScripting">
      <summary>
            Starts a scripting session with a virtual terminal.
            </summary>
      <returns>Scripting object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartScripting(Rebex.TerminalEmulation.TerminalOptions)">
      <summary>
            Starts a scripting session with a virtual terminal.
            </summary>
      <param name="options">Initial terminal options.</param>
      <returns>Scripting object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartScripting(Rebex.TerminalEmulation.TerminalOptions,System.Int32,System.Int32)">
      <summary>
            Starts a scripting session with a virtual terminal.
            </summary>
      <param name="options">Initial terminal options.</param>
      <param name="columns">Horizontal size of the terminal (in character columns).</param>
      <param name="rows">Vertical size of the terminal (in character rows).</param>
      <returns>Scripting object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartVirtualTerminal">
      <summary>
            Starts a virtual terminal session.
            </summary>
      <returns>Virtual terminal object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartVirtualTerminal(Rebex.TerminalEmulation.TerminalOptions)">
      <summary>
            Starts a virtual terminal session.
            </summary>
      <param name="options">Initial terminal options.</param>
      <returns>Virtual terminal object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartVirtualTerminal(Rebex.TerminalEmulation.TerminalOptions,System.Int32,System.Int32)">
      <summary>
            Starts a virtual terminal session.
            </summary>
      <param name="options">Initial terminal options.</param>
      <param name="columns">Horizontal size in character columns.</param>
      <param name="rows">Vertical size in character rows.</param>
      <returns>Virtual terminal object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartScriptingAsync(System.Object)">
      <summary>
            Begins asynchronous StartScripting operation.
            Starts a scripting session with a virtual terminal.
            </summary>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Scripting object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartScriptingAsync(Rebex.TerminalEmulation.TerminalOptions,System.Object)">
      <summary>
            Begins asynchronous StartScripting operation.
            Starts a scripting session with a virtual terminal.
            </summary>
      <param name="options">Initial terminal options.</param>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Scripting object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartScriptingAsync(Rebex.TerminalEmulation.TerminalOptions,System.Int32,System.Int32,System.Object)">
      <summary>
            Begins asynchronous StartScripting operation.
            Starts a scripting session with a virtual terminal.
            </summary>
      <param name="options">Initial terminal options.</param>
      <param name="columns">Horizontal size of the terminal (in character columns).</param>
      <param name="rows">Vertical size of the terminal (in character rows).</param>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Scripting object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartVirtualTerminalAsync(System.Object)">
      <summary>
            Begins asynchronous StartVirtualTerminal operation.
            Starts a virtual terminal session.
            </summary>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Virtual terminal object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartVirtualTerminalAsync(Rebex.TerminalEmulation.TerminalOptions,System.Object)">
      <summary>
            Begins asynchronous StartVirtualTerminal operation.
            Starts a virtual terminal session.
            </summary>
      <param name="options">Initial terminal options.</param>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Virtual terminal object.</returns>
    </member>
    <member name="M:Rebex.Net.Telnet.StartVirtualTerminalAsync(Rebex.TerminalEmulation.TerminalOptions,System.Int32,System.Int32,System.Object)">
      <summary>
            Begins asynchronous StartVirtualTerminal operation.
            Starts a virtual terminal session.
            </summary>
      <param name="options">Initial terminal options.</param>
      <param name="columns">Horizontal size in character columns.</param>
      <param name="rows">Vertical size in character rows.</param>
      <param name="state">An optional user-provided object that identifies this particular asynchronous operation.</param>
      <returns>Virtual terminal object.</returns>
    </member>
    <member name="E:Rebex.Net.Telnet.ValidatingCertificate">
      <summary>
            Occurs when a server certificate needs to be validated.
            </summary>
    </member>
    <member name="P:Rebex.Net.Telnet.HostName">
      <summary>
            Gets the host-name of the remote server.
            </summary>
      <value>Remote server host-name.</value>
    </member>
    <member name="P:Rebex.Net.Telnet.Port">
      <summary>
            Gets the port of the remote server.
            </summary>
      <value>Remote server port.</value>
    </member>
    <member name="P:Rebex.Net.Telnet.LogWriter">
      <summary>
            Gets or sets the logger used by this object.
            </summary>
      <value>Logger.</value>
    </member>
    <member name="P:Rebex.Net.Telnet.Proxy">
      <summary>
            Gets or sets the network proxy to use to access a remote server.
            </summary>
      <value>The <see cref="P:Rebex.Net.Telnet.Proxy" /> to use to access a remote server.</value>
    </member>
    <member name="P:Rebex.Net.Telnet.Timeout">
      <summary>
            Gets or sets the length of time in milliseconds before the operation times out (specify -1 or 0 to indicate that the request does not time out).
            </summary>
      <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 60000 (60 seconds).
            </value>
      <remarks>
        <p>
            The internal timeout counter is reset every time data is sent
            or received from to server. This also means that data transfers only
            time out after x milliseconds of inactivity, not after x milliseconds
            from the start of the transfer.
            </p>
        <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
      </remarks>
    </member>
    <member name="P:Rebex.Net.Telnet.Settings">
      <summary>
            Gets or sets Telnet object settings.
            </summary>
      <value>Telnet object settings.</value>
    </member>
    <member name="T:Rebex.Net.TelnetException">
      <summary>
            The exception that is thrown when a Telnet error occurs.
            </summary>
    </member>
    <member name="M:Rebex.Net.TelnetException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.TelnetException" /> class.
            </summary>
    </member>
    <member name="M:Rebex.Net.TelnetException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.TelnetException" /> class with the specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Rebex.Net.TelnetException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.TelnetException" /> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Rebex.Net.TelnetSettings">
      <summary>
            Specifies various Telnet settings.
            </summary>
    </member>
    <member name="M:Rebex.Net.TelnetSettings.#ctor">
      <summary>
            Creates an instance of <see cref="T:Rebex.Net.TelnetSettings" />.
            </summary>
    </member>
    <member name="P:Rebex.Net.TelnetSettings.RaiseEventsFromCurrentThread">
      <summary>
            Specifies whether to raise asynchronous events from the current working thread or 
            whether to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> available when an asynchronous operation was started.
            </summary>
      <value>False (default) to raise events using <see cref="T:System.Threading.SynchronizationContext" />; true to raise them directly form the current working thread.</value>
      <remarks>Events of synchronous methods are always raised from the current working thread.</remarks>
    </member>
  </members>
</doc>